<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>手把手教你搭建基于cf与telegraph的免费图床</title>
      <link href="/2024/10/17/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Ecf%E4%B8%8Etelegraph%E7%9A%84%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/"/>
      <url>/2024/10/17/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Ecf%E4%B8%8Etelegraph%E7%9A%84%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<p><strong>注意！！！如果你之前部署过此项目，现在一定要更新一下最新版本</strong></p><p><img src="https://img.inner.icu/file/1729133642746_true" alt="img"></p><h2 id="关于本项目"><a href="#关于本项目" class="headerlink" title="关于本项目"></a>关于本项目</h2><p><a href="https://github.com/MarSeventh/CloudFlare-ImgBed">项目仓库（点击跳转）</a></p><p><a href="https://github.com/MarSeventh/Sanyue-ImgHub">前端仓库（点击跳转）</a></p><p><a href="https://sanyue.site/">作者博客（点击跳转）</a></p><p>本项目是 <a href="https://github.com/cf-pages/Telegraph-Image">Telegraph-Image</a> 的重制版</p><blockquote><p>这个项目为你提供了一个不限容量不限数量的图床 + cdn 服务</p><p>图片存储在 telegraph 的服务器上 由 cloudflare 提供全球 cdn 服务</p><p>基于 cloudflare pages 完全免费（现在 page 不限制额度了 和 worker 分开了）</p><p>支持图片审查 API，可自动屏蔽不良图片</p><p>可以自定义域名（也可以使用 cf 分配的 *.page.dev 但好像墙了 可以用其他 dns 的域名）获取域名可以看</p></blockquote><p>该项目在原项目的基础上加以完善 特色功能如下</p><blockquote><p>前后端全部开源 整体部署简单；</p><p>添加了身份认证（解决了原项目的一个大问题，防止滥用）；</p><p>突破 5mb 的上传限制（超过了会自动压缩）；</p><p>流畅丝滑的过渡动画；</p><p>多种上传方式（拖拽，选择文件，粘贴等）；</p><p>多样化复制方式（可直接复制 html，BBCode，MarkDown 语句）；</p><p>可以自定义页面，网站名称与 logo，满足更多自定义需求；</p><p>增加了随机图 api；</p><p>更多的欢迎大家自行探索</p></blockquote><h3 id="界面图"><a href="#界面图" class="headerlink" title="界面图"></a>界面图</h3><p><img src="https://img.inner.icu/file/1729133694452_true" alt="img"></p><p><img src="https://img.inner.icu/file/1729133694456_true" alt="img"></p><p><img src="https://img.inner.icu/file/1729133699636_true" alt="img"></p><p><img src="https://img.inner.icu/file/1729133700933_true" alt="img"></p><p><a href="https://img.inner.icu/file/1729133642746_true">图床速度体验（点击跳转）</a></p><p><strong>开始之前，要先理解两个概念：</strong></p><p>1.telegram 著名的通讯软件</p><p>2.telegraph 由 telegram 推出的匿名图片托管平台（现在不匿名了）</p><h2 id="实操部署"><a href="#实操部署" class="headerlink" title="实操部署"></a>实操部署</h2><p>部署此项目首先需要拥有一个 <a href="https://github.com/">GitHub 账号（点击跳转）</a>和一个 <a href="https://www.cloudflare.com/">cloudflare 账号（点击跳转）</a>以及 Telegram 账号</p><h3 id="Telegram-配置"><a href="#Telegram-配置" class="headerlink" title="Telegram 配置"></a>Telegram 配置</h3><p>自 9.8 起 由于 telegraph 图床被滥用 该项目上传渠道已切换至 Telegram Channel</p><p>这里需要获取到**<code>TG_BOT_TOKEN</code><strong>和</strong><code>TG_CHAT_ID</code>**这两个值 后续有用（必须的！！）</p><p>首先需要一个 telegram 账号 软件直接去 Google Play 或者<a href="https://t.me/">官网（t.me）</a>下载即可</p><p>我用的 177 电信卡 + 86 能正常收到验证码</p><p><img src="https://img.inner.icu/file/1729133709295_true" alt="img"></p><p>注册 telegram 后 可以安装这个简体中文包<a href="https://t.me/setlanguage/zh-hans-beta">点此安装官方简体中文语言包</a>（这是官方的 绝对安全）</p><p>这边我用电脑版做演示 手机版一样的</p><h4 id="获取-TG-BOT-TOKEN"><a href="#获取-TG-BOT-TOKEN" class="headerlink" title="获取 TG_BOT_TOKEN"></a>获取 TG_BOT_TOKEN</h4><p>在搜索框中搜索 “**@BotFather**” 注意前面有个机器人的标志和后面的认证 千万别点错了！！！</p><p><img src="https://img.inner.icu/file/1729133706980_true" alt="img"></p><p>第一次使用点开对话后点击 “<strong>开始</strong>”</p><p><img src="https://img.inner.icu/file/1729133708881_true" alt="img"></p><p>按图中进行配置</p><p><img src="https://img.inner.icu/file/1729133711883_true" alt="img"></p><h4 id="获取-TG-CHAT-ID（频道-ID）"><a href="#获取-TG-CHAT-ID（频道-ID）" class="headerlink" title="获取 TG_CHAT_ID（频道 ID）"></a>获取 TG_CHAT_ID（频道 ID）</h4><p>在 telegram 中 打开左侧的二级菜单（三道杠） 打开<strong>新建频道（Manage Channel）</strong></p><p><img src="https://img.inner.icu/file/1729133837448_true" alt="img"></p><p>频道的名字随便起 后面都跳过就行</p><p>完成创建后 找到 “<strong>管理频道</strong>”</p><p><img src="https://img.inner.icu/file/1729133721729_true" alt="img"></p><p>在菜单中找到 “<strong>管理员（Administrators）</strong>”</p><p><img src="https://img.inner.icu/file/1729133718337_true" alt="img"></p><p>菜单中点击 “<strong>添加管理员</strong>”</p><p>将刚才创建的机器人也设为管理员（注意搜索时要 @刚才设置的用户名 别填加错了）</p><p><img src="https://img.inner.icu/file/1729133730025_true" alt="img"></p><p>权限默认的就可以</p><p>完成后首页搜索 “**@VersaToolsBot**”</p><p>回复 <strong>&#x2F;start</strong> 然后再你刚才创建的频道里随便发一条消息 并将消息转发到 <strong>@VersaToolsBot</strong>（如图）</p><p><img src="https://img.inner.icu/file/1729133828613_true" alt="img"></p><p>在频道中发送的</p><p><img src="https://img.inner.icu/file/1729133820284_true" alt="img"></p><p>刚才发的消息转发到 <strong>@VersaToolsBot</strong></p><p><img src="https://img.inner.icu/file/1729133825502_true" alt="img"></p><p>保留好这两个值，后面会用到</p><h3 id="cloudflare-配置"><a href="#cloudflare-配置" class="headerlink" title="cloudflare 配置"></a>cloudflare 配置</h3><p>首先打开<a href="https://github.com/MarSeventh/CloudFlare-ImgBed">该项目仓库（点击跳转）</a>点击 “Fork”（如果你认可此项目 可以点击旁边的 starts 以支持作者）</p><p><img src="https://img.inner.icu/file/1729133780841_true" alt="img"></p><p>此页面不用动任何设置 直接点击 “<strong>Create fork</strong>” 即可</p><p><img src="https://img.inner.icu/file/1729133775733_true" alt="img"></p><p>成功创建 fork 后来到 cloudflare 登录你的账号并打开仪表盘 点击侧边栏中的 “<strong>Workers 和 Pages</strong>”</p><p><img src="https://img.inner.icu/file/1729133774451_true" alt="img"></p><p>点击上方的 “<strong>创建</strong>”</p><p><img src="https://img.inner.icu/file/1729133872966_true" alt="img"></p><p>选到 “<strong>Pages</strong>” 一栏，点击 “<strong>连接到 Git</strong>”</p><p><img src="https://img.inner.icu/file/1729133775730_true" alt="img"></p><p>在打开的第一个页面 点击 “<strong>连接到 GitHub</strong>” 随后会跳转到 GitHub 进行授权 选到 “<strong>All repositories</strong>”（该选项是默认的 啥也不用动就好）</p><p>完成授权后会回到 cf 的选择存储库的界面（如下图），选择刚才 fork 的仓库后点击 “<strong>开始设置</strong>”</p><p><img src="https://img.inner.icu/file/1729133763745_true" alt="img"></p><p>下一个界面啥也不用动，直接划到下面点击 “<strong>保存并部署即可</strong>”</p><p>出现下图即部署完成，点击 “<strong>继续处理项目</strong>”</p><p><img src="https://img.inner.icu/file/1729133767048_true" alt="img"></p><p>到此，最基本的已经部署好了，下面是设置认证码与后台管理的账号密码</p><p>点击 “<strong>自定义域</strong>” 添加一个你自己的域名（域名不是必须在 cf 中 在其他的 dns 中也行 但是还要额外配置比较麻烦）</p><p><img src="https://img.inner.icu/file/1729133755329_true" alt="img"></p><p>点击左侧栏中的 “<strong>KV</strong>”（在 <strong>Workers 和 Pages</strong> 菜单下）</p><p><img src="https://img.inner.icu/file/1729133755503_true" alt="img"></p><p>点击 “<strong>创建命名空间</strong>”</p><p><img src="https://img.inner.icu/file/1729134053536_true" alt="img"></p><p>名称为 “*<strong>img_url*<strong>” 点击 “</strong>添加</strong>”</p><p><img src="https://img.inner.icu/file/1729133748786_true" alt="img"></p><p>完成添加后 回到 page 的界面 点击 “<strong>设置</strong>” 后点击 “<strong>变量与机密</strong>”</p><p><img src="https://img.inner.icu/file/1729133748081_true" alt="img"></p><p>找到 “<strong>绑定</strong>” 一栏 点击 “<strong>添加</strong>” 在弹出的页面中找到 “<strong>KV 命名空间</strong>”</p><p><img src="https://img.inner.icu/file/1729133752399_true" alt="img"></p><p>“<strong>变量名称</strong>” 填写 “***img_url***”</p><p>“<strong>KV 命名空间</strong> “选择刚才创建的 KV “*<strong>img_url*<strong>” 完成后点击</strong>保存</strong></p><p><img src="https://img.inner.icu/file/1729133750262_true" alt="img"></p><p>在绑定的上面找到 “<strong>变量与机密</strong>” 一栏 点击右侧的 “<strong>添加</strong>”</p><p>添加 “<strong>环境变量</strong>”</p><p>在这里有些常用环境变量可以添加 如下表</p><table><thead><tr><th><strong>变量名称</strong></th><th><strong>作用</strong></th><th><strong>是否推荐</strong></th></tr></thead><tbody><tr><td><em><strong>TG_CHAT_ID</strong></em></td><td>telegram 频道 ID</td><td><strong>必须</strong></td></tr><tr><td>*<strong>TG_BOT_TOKEN*</strong></td><td>telegram 机器人 token</td><td><strong>必须</strong></td></tr><tr><td>*<strong>BASIC_USER*</strong></td><td>后台管理的账户名</td><td>推荐</td></tr><tr><td><em><strong>BASIC_PASS</strong></em></td><td>后台管理的密码</td><td>推荐</td></tr><tr><td><em><strong>AUTH_CODE</strong></em></td><td>前台的认证码</td><td>强烈推荐 防止他人滥用</td></tr><tr><td>*<strong>ModerateContentApiKey*</strong></td><td>图片审查 api 怎么用后面会讲到 这里是填获取的 api</td><td></td></tr><tr><td>*<strong>ALLOWED_DOMAINS*</strong></td><td>防盗链 访问域名限制 多个允许的域名用英文 <code>,</code> 分割，如：<code>域名.com,域名2.top</code></td><td>没必要 反正流量无限的速度也不受影响 还可能造成自己的不便</td></tr><tr><td>*<strong>AllowRandom*</strong></td><td>随机图 api 的前置 后面会讲到</td><td></td></tr></tbody></table><p>（还有关于界面自定义的变量 可以去 GitHub 看 个人不推荐界面大改 一是麻烦 二是还要动前端）</p><p>下面是我的配置（值里面填你实际的）这张图是早期的 不需要配置 tg 现在一定要部署 TG 的两个变量！！</p><p>（觉得比较敏感的可以点击右侧的加密 这里就单纯的是以后看不到值的内容了 没其他实际作用）</p><p><img src="https://img.inner.icu/file/1729133747165_true" alt="img"></p><p>完成后点击保存 然后重新部署（所有关于环境变量和 kv 绑定的修改都要重新部署一遍）</p><p>选到 “<strong>部署</strong>” 一栏 在 “<strong>所有部署</strong>” 下面找到你最新的部署（就是最上面的那一个），鼠标点击在右侧三个点 在弹出的菜单中选择 “<strong>重新部署</strong>”</p><p><img src="https://img.inner.icu/file/1729133745048_true" alt="img"></p><p>等待部署完成后即可使用</p><h3 id="内容审查-api"><a href="#内容审查-api" class="headerlink" title="内容审查 api"></a>内容审查 api</h3><p>最近不知道官网怎么了 没有注册入口了 直接进以前的注册入口 moderatecontent.com&#x2F;signin 会报 500 错误，不知道是跑路了还是服务器崩了 最近暂时用不了 需要的还是设前台认证码吧</p><p>打开 <a href="https://moderatecontent.com/">moderatecontent 官网（点击跳转）</a></p><p>注册账号后获取到你的 api 在环境变量中添加一条 “***ModerateContentApiKey***” 值就是你获取的 api</p><p>保存后别忘了重新部署一遍</p><h3 id="随机图-api"><a href="#随机图-api" class="headerlink" title="随机图 api"></a>随机图 api</h3><p><img src="https://img.inner.icu/file/1729133739575_true" alt="img"></p><p>在设置好环境变量后访问 <a href="https://your.domain/random">https://your.domain/random</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> web工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何用Hexo搭建个人博客</title>
      <link href="/2024/08/12/%E5%A6%82%E4%BD%95%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/08/12/%E5%A6%82%E4%BD%95%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>我的个人博客搭建成功啦！</p><p>这篇文章会给大家分享我是如何从0开始搭建我的个人独立博客的</p><p>接下来我们开始吧</p><p><strong>文章比较精简，没有废话，不要跳步</strong></p><h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><p>首先我们需要到对应网站下载需要的工具</p><p><strong><a href="https://nodejs.org/en/">下载nodejs</a></strong></p><hr><p><em>(这篇文章里有修改nodejs缓存路径的教学:<a href="https://www.cnblogs.com/liuqiyun/p/8133904.html">文章链接</a>，c盘战士可以不看)</em></p><p><strong><a href="https://git-scm.com/downloads">下载git</a></strong></p><hr><p>一直点确定就行，全部按它默认勾的</p><p><em>(这里有一篇详细安装教程<a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">文章链接</a>，可以不看)</em></p><p><strong>接下来我们测试下是否都下载成功</strong></p><p>管理员运行cmd，依次输入</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">-v</span></span><br><span class="line">npm -v（这个是<span class="keyword">node</span><span class="title">附带的）</span></span><br><span class="line"><span class="title">git</span> -v</span><br></pre></td></tr></table></figure><p><strong>下载hexo</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-<span class="keyword">cli</span> -g</span><br></pre></td></tr></table></figure><h2 id="搭建仓库"><a href="#搭建仓库" class="headerlink" title="搭建仓库"></a>搭建仓库</h2><p>成功下载好工具之后，我们开始搭建GitHub存储静态页面的仓库</p><p>首先注册&#x2F;登入<a href="https://github.com/">Github</a></p><p>点击Create a new repository进入新建仓库页面</p><p>仓库名输入：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名<span class="string">.github.io</span></span><br></pre></td></tr></table></figure><p>勾选 Public</p><p>勾选 Add a README file</p><p>拉到下面点击create创建</p><h2 id="生成SSH-Keys"><a href="#生成SSH-Keys" class="headerlink" title="生成SSH Keys"></a>生成SSH Keys</h2><p>进入任意文件夹，右键空白处然后点Git bash here,输入</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -<span class="built_in">t</span> rsa -C <span class="string">&quot;邮件地址&quot;</span></span><br></pre></td></tr></table></figure><p>然后敲4次Enter⌨️</p><p>然后进入C:\Users\用户名，在里面进入.ssh文件</p><p>用记事本打开里面的id_rsa.pub,全选复制里面的代码</p><p><strong>然后打开github</strong></p><p>进入用户设置，找到SSH keys</p><p>新建SSH keys，名称随意，在下面粘贴代码，</p><p>然后创建</p><p><strong>测试是否成功</strong></p><p>在git bash中输入</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssh</span> -T git<span class="variable">@github</span>.com</span><br></pre></td></tr></table></figure><p>回车，然后再输入yes</p><h2 id="本地生成博客内容"><a href="#本地生成博客内容" class="headerlink" title="本地生成博客内容"></a>本地生成博客内容</h2><p>在喜欢位置新建文件Blog，然后进入文件夹</p><p>右键空白处然后点Git bash here，输入</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">init</span></span><br></pre></td></tr></table></figure><blockquote><p>如果‘command not find’，就在前面加上npx，如：<code>npx hexo init</code></p></blockquote><p>然后</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">install</span></span><br></pre></td></tr></table></figure><p>接下来依次输入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="selector-tag">g</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>（如果不成功的话就重复直到成功，因为国内与github连接不稳定）</p><p>现在就可以复制生成的链接进入浏览器看到我们生成的本地服务器了</p><p>然后回到命令行，ctrl+c关闭</p><h2 id="上线博客"><a href="#上线博客" class="headerlink" title="上线博客"></a>上线博客</h2><p>进入之前的Blog文件夹，用记事本打开_config.yml</p><p>拉到最下面将deploy后面的全删掉，复制粘贴这段</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">type:</span> git</span><br><span class="line"><span class="symbol">repository:</span> </span><br><span class="line"><span class="symbol">branch:</span> main</span><br></pre></td></tr></table></figure><blockquote><p>注意缩进格式：每行前面都有两个空格不要删，每个冒号后面都有个空格也不要删！</p></blockquote><p>去github之前生成的仓库页面，点code，复制https链接</p><p>将其粘贴到我们记事本中的<code>repository：</code>后面</p><p>然后保存退出</p><p><strong>回到博客文件夹，git bash</strong></p><p>安装自动部署发布工具</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>然后在Blog文件夹右键打开git bash，依次输入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="selector-tag">g</span>（生成）</span><br><span class="line">hexo d（上传）</span><br></pre></td></tr></table></figure><blockquote><p>如果是第一次使用git的话会需要配置</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.email</span> <span class="string">&quot;你的邮箱&quot;</span></span><br><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.name</span> <span class="string">&quot;你的名字&quot;</span></span><br></pre></td></tr></table></figure><p>配置完后再<code>hexo d</code>上传</p><p>在跳出来的窗口内进行登录</p></blockquote><p>接下来我们就成功把本地内容上传到github了</p><p>上传成功以后，我们就算搭建好了！上自己的网址看看吧</p><p>网址是我们之前设的仓库名：用户名.github.io</p><h2 id="网站资料"><a href="#网站资料" class="headerlink" title="网站资料"></a>网站资料</h2><p>我们的博客标题还是默认的hexo，整个页面是初始默认的，接下来我们对其进行修改</p><p>用记事本打开我们blog文件夹中的_config.yml文件</p><p>将#Site下面按自己的需求填上</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">## Site</span></span><br><span class="line"><span class="symbol">title:</span> 标题</span><br><span class="line"><span class="symbol">subtitle:</span> 副标题</span><br><span class="line"><span class="symbol">description:</span> 描述</span><br><span class="line"><span class="symbol">keywords:</span> 关键词</span><br><span class="line"><span class="symbol">author:</span> 站主</span><br><span class="line"><span class="symbol">language:</span> 语言（可以填写<span class="built_in">zh</span>-CN）</span><br><span class="line"><span class="symbol">timezone:</span> 时区（可以填写Asia/Shanghai）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后保存</p><h2 id="如何上传文章"><a href="#如何上传文章" class="headerlink" title="如何上传文章"></a>如何上传文章</h2><p>我们在Blog文件夹中打开git bash,输入下方代码就可以生成新的文章md文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="selector-tag">g</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>文章是.md格式，在我们的Blog文件夹中的source&#x2F;_posts中</p><p>推荐用Typora软件来编辑.md格式的文件</p><blockquote><p>Typora官网：<a href="https://www.typoraio.cn/%EF%BC%8889%E5%85%83%E7%BB%88%E8%BA%AB%E4%BD%BF%E7%94%A8%EF%BC%8C%E6%8E%A8%E8%8D%90%E6%AD%A3%E7%89%88%EF%BC%89">https://www.typoraio.cn/（89元终身使用，推荐正版）</a></p><p>破解版奉上：<a href="https://kevinwu06.lanzout.com/iXkq30icv1ha">蓝奏云文件</a></p></blockquote><p>然后我们用Typora软件打开该.md文件就可以开始写文章了</p><p>写好以后，我们还是一样打开git bash生成、上传</p><p>Copy</p><hr><p>至此，我们就成功搭建好基本的博客了，剩下的就是对博客的一些优化和美化了。</p><p>我目前使用的hexo博客主题是<a href="http://docs.anheyu.com/">anzhiyu</a>，推荐主题：<a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly</a>，<a href="http://docs.anheyu.com/">anzhiyu</a></p><p>大家可以参阅主题文档进行安装配置</p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> web工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费简单好用的内网穿透工具（ngrok、natapp），微信回调地址配置</title>
      <link href="/2024/08/06/%E5%85%8D%E8%B4%B9%E7%AE%80%E5%8D%95%E5%A5%BD%E7%94%A8%E7%9A%84%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7%EF%BC%88ngrok%E3%80%81natapp%EF%BC%89%EF%BC%8C%E5%BE%AE%E4%BF%A1%E5%9B%9E%E8%B0%83%E5%9C%B0%E5%9D%80%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/08/06/%E5%85%8D%E8%B4%B9%E7%AE%80%E5%8D%95%E5%A5%BD%E7%94%A8%E7%9A%84%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7%EF%BC%88ngrok%E3%80%81natapp%EF%BC%89%EF%BC%8C%E5%BE%AE%E4%BF%A1%E5%9B%9E%E8%B0%83%E5%9C%B0%E5%9D%80%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>在一些特殊的场景下，需要把我们的内网暴露出去，比如写了一个接口或网站想让别人看到，或者进行第三方开发调试的时候需要一个外网可用的回调地址。</p><p>来对比一下ngrok和natapp免费功能的优劣</p><table><thead><tr><th></th><th>限制</th><th>http&#x2F;https</th><th>域名</th><th>支持程度</th><th>操作</th><th>访问</th></tr></thead><tbody><tr><td>ngrok</td><td>加了一个中间页，需要设置特殊的请求头</td><td>都支持</td><td>可以使用隧道固定域名</td><td>微信对其有限制，有时候不生效</td><td>简单</td><td>没有梯子会很慢</td></tr><tr><td>natapp</td><td>无</td><td>只有http</td><td>每次开启不一样的域名</td><td>挺好</td><td>简单</td><td>正常</td></tr></tbody></table><p>如果第三方不支持ngrok的时候可以使用natapp来替代，不然ngrok可以固定域名还是挺方便的</p><h2 id="Natapp"><a href="#Natapp" class="headerlink" title="Natapp"></a>Natapp</h2><h3 id="1、登录注册账号、下载软件"><a href="#1、登录注册账号、下载软件" class="headerlink" title="1、登录注册账号、下载软件"></a>1、登录注册账号、下载软件</h3><ol><li><a href="https://natapp.cn/">https://natapp.cn/</a></li></ol><p><img src="https://img.inner.icu/file/120164f4ac0bdc3f2b541.png" alt="在这里插入图片描述"></p><p>下载下来的 natapp可能没有权限，只需要给它赋予权限就好了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 natapp</span><br></pre></td></tr></table></figure><h3 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h3><h4 id="2-1、购买隧道、查看token"><a href="#2-1、购买隧道、查看token" class="headerlink" title="2-1、购买隧道、查看token"></a>2-1、购买隧道、查看token</h4><p><img src="https://img.inner.icu/file/9a4b765925386eec4ba53.png" alt="在这里插入图片描述"><br><img src="https://img.inner.icu/file/3d4f648d2d9bfe12507f3.png" alt="在这里插入图片描述"></p><h4 id="2-2、端口穿透"><a href="#2-2、端口穿透" class="headerlink" title="2-2、端口穿透"></a>2-2、端口穿透</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">XXXXXXX 替换成你的token即可</span></span><br><span class="line">./natapp -authtoken=XXXXXXX</span><br></pre></td></tr></table></figure><p><img src="https://img.inner.icu/file/ec8e657f86b97a3850f55.png" alt="在这里插入图片描述"></p><h2 id="Ngrok"><a href="#Ngrok" class="headerlink" title="Ngrok"></a>Ngrok</h2><h3 id="1、登录注册账号、下载软件-1"><a href="#1、登录注册账号、下载软件-1" class="headerlink" title="1、登录注册账号、下载软件"></a>1、登录注册账号、下载软件</h3><ol><li><a href="https://dashboard.ngrok.com/login">https://dashboard.ngrok.com/login</a></li><li><a href="https://ngrok.com/download">https://ngrok.com/download</a></li></ol><h3 id="2、使用-1"><a href="#2、使用-1" class="headerlink" title="2、使用"></a>2、使用</h3><h4 id="2-1、获取并设置-token"><a href="#2-1、获取并设置-token" class="headerlink" title="2-1、获取并设置 token"></a>2-1、获取并设置 token</h4><p><img src="https://img.inner.icu/file/04ac3144acbf6ae2cc734.png" alt="在这里插入图片描述"></p><p>可以执行Command Line，把token进行设置， ngrok就是上一步下载的可执行文件</p><h4 id="2-2、使用"><a href="#2-2、使用" class="headerlink" title="2-2、使用"></a>2-2、使用</h4><p>假如我们要暴露 9999端口，就执行下面命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./ngrok http 9999</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p><img src="https://img.inner.icu/file/cc95cfbce5c509c58dd53.png" alt="在这里插入图片描述"></p><p>复制生成的随机域名到浏览器，会看到如下页面</p><p><img src="https://img.inner.icu/file/7b5440e2342c2f5b8b023.png" alt="在这里插入图片描述"></p><p>很早之前不会有这样一个中间页，如果只是临时访问，点一下 【Visit Site】也就可以了，但如果前后端对接或者第三方回调，就难办了。</p><p>官方提供三个解决办法</p><ol><li>点一下 【Visit Site】</li><li>访问的时候加一个特殊的请求头 【ngrok-skip-browser-warning】</li><li>充值</li></ol><h3 id="3、隧道"><a href="#3、隧道" class="headerlink" title="3、隧道"></a>3、隧道</h3><p>使用隧道的好处就是可以固定域名</p><p><img src="https://img.inner.icu/file/4feb36b69a21833c0126f.png" alt="在这里插入图片描述"></p><p><img src="https://img.inner.icu/file/ee8f478823c45e4c1f8a3.png" alt="在这里插入图片描述"></p><p><img src="https://img.inner.icu/file/f5b4ecbe2e910f4bdfab4.png" alt="在这里插入图片描述"></p><p><img src="https://img.inner.icu/file/c7a52a40cf33c71716442.png" alt="在这里插入图片描述"></p><h2 id="微信回调配置"><a href="#微信回调配置" class="headerlink" title="微信回调配置"></a>微信回调配置</h2><h3 id="1、注册测试公众号"><a href="#1、注册测试公众号" class="headerlink" title="1、注册测试公众号"></a>1、注册测试公众号</h3><p>只需要扫码登录就行</p><p><a href="https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&t=sandbox/index">https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&amp;t=sandbox/index</a></p><h3 id="2、回调代码"><a href="#2、回调代码" class="headerlink" title="2、回调代码"></a>2、回调代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/callback&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">entryCallbackSign</span><span class="params">(<span class="meta">@RequestParam(name = &quot;signature&quot;, required = false)</span> String signature,</span></span><br><span class="line"><span class="params">                                <span class="meta">@RequestParam(name = &quot;timestamp&quot;, required = false)</span> String timestamp,</span></span><br><span class="line"><span class="params">                                <span class="meta">@RequestParam(name = &quot;nonce&quot;, required = false)</span> String nonce,</span></span><br><span class="line"><span class="params">                                <span class="meta">@RequestParam(name = &quot;openid&quot;, required = false)</span> String openid,</span></span><br><span class="line"><span class="params">                                <span class="meta">@RequestParam(name = &quot;encrypt_type&quot;, required = false)</span> String encType,</span></span><br><span class="line"><span class="params">                                <span class="meta">@RequestParam(name = &quot;msg_signature&quot;, required = false)</span> String msgSignature,</span></span><br><span class="line"><span class="params">                                <span class="meta">@RequestParam(name = &quot;echostr&quot;, required = false)</span> String echostr)</span> &#123;</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;微信回调 GET&quot;</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;signature: &#123;&#125;&quot;</span>, signature);</span><br><span class="line">    log.debug(<span class="string">&quot;timestamp: &#123;&#125;&quot;</span>, timestamp);</span><br><span class="line">    log.debug(<span class="string">&quot;nonce: &#123;&#125;&quot;</span>, nonce);</span><br><span class="line">    log.debug(<span class="string">&quot;openid: &#123;&#125;&quot;</span>, openid);</span><br><span class="line">    log.debug(<span class="string">&quot;encType: &#123;&#125;&quot;</span>, encType);</span><br><span class="line">    log.debug(<span class="string">&quot;msgSignature: &#123;&#125;&quot;</span>, msgSignature);</span><br><span class="line">    log.debug(<span class="string">&quot;echostr: &#123;&#125;&quot;</span>, echostr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> echostr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(value = &quot;/callback&quot;, produces = &quot;application/xml; charset=UTF-8&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">entryCallback</span><span class="params">(<span class="meta">@RequestBody(required = false)</span> String requestBody,</span></span><br><span class="line"><span class="params">                            <span class="meta">@RequestParam(name = &quot;signature&quot;, required = false)</span> String signature,</span></span><br><span class="line"><span class="params">                            <span class="meta">@RequestParam(name = &quot;timestamp&quot;, required = false)</span> String timestamp,</span></span><br><span class="line"><span class="params">                            <span class="meta">@RequestParam(name = &quot;nonce&quot;, required = false)</span> String nonce,</span></span><br><span class="line"><span class="params">                            <span class="meta">@RequestParam(name = &quot;openid&quot;, required = false)</span> String openid,</span></span><br><span class="line"><span class="params">                            <span class="meta">@RequestParam(name = &quot;encrypt_type&quot;, required = false)</span> String encType,</span></span><br><span class="line"><span class="params">                            <span class="meta">@RequestParam(name = &quot;msg_signature&quot;, required = false)</span> String msgSignature)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;微信回调 POST&quot;</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;signature: &#123;&#125;&quot;</span>, signature);</span><br><span class="line">    log.debug(<span class="string">&quot;timestamp: &#123;&#125;&quot;</span>, timestamp);</span><br><span class="line">    log.debug(<span class="string">&quot;nonce: &#123;&#125;&quot;</span>, nonce);</span><br><span class="line">    log.debug(<span class="string">&quot;openid: &#123;&#125;&quot;</span>, openid);</span><br><span class="line">    log.debug(<span class="string">&quot;encType: &#123;&#125;&quot;</span>, encType);</span><br><span class="line">    log.debug(<span class="string">&quot;requestBody : &quot;</span> + requestBody);</span><br><span class="line">    log.debug(<span class="string">&quot;msgSignature: &#123;&#125;&quot;</span>, msgSignature);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、回调配置"><a href="#3、回调配置" class="headerlink" title="3、回调配置"></a>3、回调配置</h3><p><img src="https://img.inner.icu/file/c8750b311c7eb4a5dd121.png" alt="在这里插入图片描述"></p><p>注：网页回调地址这里不需要http开头<br><img src="https://img.inner.icu/file/4880fa07d032753d05eb6.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>编译scss/sass报错invalid character解决方案</title>
      <link href="/2024/08/02/character%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2024/08/02/character%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img.inner.icu/file/cbe346e59c6560971d143.png" alt="img"></p><p>webstorm中编辑scss文件可以添加一个watcher实现实时的css编译输出预览功能，今日在配置webstorm环境的时候发现报了某个scss文件Invalid GBK character编译错误，指示的错误行数是一行中文注释。 此源文件的编码是UTF-8，工作区项目也是UTF-8的.</p><p>sass文件编译时候使用ruby环境，无论是界面化的koala工具还是命令行模式的都无法通过，真是令人烦恼。</p><p>容易出现中文注释时候无法编译通过，或者出现乱码，找了几天的解决方法终于解决了。</p><p>这个问题的奇葩之处在于在xp环境中没有任何问题，只是在windows7环境中才出现的这个。</p><p>sass编译时候出现如下错误的解决方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax error: Invalid GBK character &quot;\xE5&quot;</span><br><span class="line">on line 8 of E:\work\sass\sass\_big_box.scss</span><br><span class="line">from line 16 of E:\work\sass\sass\main.scss</span><br><span class="line">Use --trace for backtrace.</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax error: Invalid GBK character &quot;\xE5&quot;</span><br><span class="line">on line 2 of E:\work\sass\sass\main.scss</span><br><span class="line">Use --trace for backtrace.</span><br></pre></td></tr></table></figure><p>解决办法：</p><p>1.koala可视化编译工具</p><p>找到安装目录里面sass-3.3.7模块下面的engine.rb文件，例如下面路径：</p><p>C:\Program Files (x86)\Koala\rubygems\gems\sass-3.3.7\lib\sass</p><p>在这个文件里面engine.rb，添加一行代码</p><p>Encoding.default_external &#x3D; Encoding.find(‘utf-8’) 放在所有的require XXXX 之后即可。</p><p>2.命令行工具同理</p><p>找到ruby的安装目录，里面也有sass模块，如这个路径：</p><p>C:\Ruby\lib\ruby\gems\1.9.1\gems\sass-3.3.14\lib\sass</p><p>在这个文件里面engine.rb，添加一行代码（同方法1）</p><p>Encoding.default_external &#x3D; Encoding.find(‘utf-8’) 放在所有的require XXXX 之后即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring中多线程定时计划任务</title>
      <link href="/2024/08/02/Spring%E4%B8%AD%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9A%E6%97%B6%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/"/>
      <url>/2024/08/02/Spring%E4%B8%AD%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9A%E6%97%B6%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img.inner.icu/file/600475deeeceb2363c8a7.png" alt="img"></p><p>可以将@Scheduled任务交给线程池进行处理。在Spring Boot中，可以通过以下两种方式来将@Scheduled任务加入线程池：</p><p>使用@EnableScheduling + @Configuration配置ThreadPoolTaskScheduler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskSchedulerConfig</span> &#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> TaskScheduler <span class="title function_">taskScheduler</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ThreadPoolTaskScheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskScheduler</span>();</span><br><span class="line">    scheduler.setPoolSize(<span class="number">10</span>);</span><br><span class="line">    scheduler.initialize();</span><br><span class="line">    <span class="keyword">return</span> scheduler;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，我们通过配置ThreadPoolTaskScheduler来创建一个线程池，并使用@EnableScheduling注解将定时任务开启。其中，setPoolSize方法可以设置线程池的大小，默认为1。</p><p>使用ThreadPoolTaskExecutor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskExecutorConfig</span> &#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">taskExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">    executor.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">    executor.setMaxPoolSize(<span class="number">50</span>);</span><br><span class="line">    executor.setQueueCapacity(<span class="number">1000</span>);</span><br><span class="line">    executor.setKeepAliveSeconds(<span class="number">60</span>);</span><br><span class="line">    executor.setThreadNamePrefix(<span class="string">&quot;task-executor-&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> executor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，我们通过配置ThreadPoolTaskExecutor来创建一个线程池，并使用@EnableScheduling注解将定时任务开启。其中setCorePoolSize、setMaxPoolSize、setQueueCapacity、setKeepAliveSeconds等方法可以用于配置线程池的大小和任务队列等参数。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机Linux磁盘扩容</title>
      <link href="/2024/08/01/%E8%99%9A%E6%8B%9F%E6%9C%BALinux%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/"/>
      <url>/2024/08/01/%E8%99%9A%E6%8B%9F%E6%9C%BALinux%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img.inner.icu/file/9ef129e185d5e531b3cde.png" alt="image-20240731213324426"></p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>esxi下直接调整虚拟磁盘大小，guest系统内新增容量不生效，需要手动调整硬盘分区表、执行文件系统扩容。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1-调整虚拟磁盘大小"><a href="#1-调整虚拟磁盘大小" class="headerlink" title="1. 调整虚拟磁盘大小"></a>1. 调整虚拟磁盘大小</h3><p><img src="https://img.inner.icu/file/8a29bbf81a622a7ce092d.png" alt="img"></p><h3 id="2-确认guest系统已识别到新的磁盘容量"><a href="#2-确认guest系统已识别到新的磁盘容量" class="headerlink" title="2. 确认guest系统已识别到新的磁盘容量"></a>2. 确认guest系统已识别到新的磁盘容量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]# fdisk -l</span><br><span class="line"></span><br><span class="line">Disk /dev/sda: 107.4 GB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk label type: dos</span><br><span class="line">Disk identifier: 0x00099ab9</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sda1   *        2048     2099199     1048576   83  Linux</span><br><span class="line">/dev/sda2         2099200    33554431    15727616   8e  Linux LVM</span><br><span class="line"></span><br><span class="line">Disk /dev/mapper/centos-root: 14.4 GB, 14382268416 bytes, 28090368 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/mapper/centos-swap: 1719 MB, 1719664640 bytes, 3358720 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br></pre></td></tr></table></figure><p>第一行，<code>Disk /dev/sda: 107.4 GB</code></p><h3 id="3-扩展磁盘分区"><a href="#3-扩展磁盘分区" class="headerlink" title="3. 扩展磁盘分区"></a>3. 扩展磁盘分区</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此处磁盘号按实际填写，如果只有一个盘一般是sda</span></span><br><span class="line">[root@gitlab ~]# fdisk /dev/sda </span><br><span class="line">Welcome to fdisk (util-linux 2.23.2).</span><br><span class="line"></span><br><span class="line">Changes will remain in memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write command.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建分区</span></span><br><span class="line">Command (m for help): n</span><br><span class="line">Partition type:</span><br><span class="line">   p   primary (2 primary, 0 extended, 2 free)</span><br><span class="line">   e   extended</span><br><span class="line">   </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建主分区</span></span><br><span class="line">Select (default p): p </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分区号设置</span></span><br><span class="line">Partition number (3,4, default 3): </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分区起始块</span></span><br><span class="line">First sector (33554432-209715199, default 33554432): </span><br><span class="line">Using default value 33554432</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G&#125; (33554432-209715199, default 209715199): </span><br><span class="line">Using default value 209715199</span><br><span class="line">Partition 3 of type Linux and of size 84 GiB is set</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改分区文件系统</span></span><br><span class="line">Command (m for help): t</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定刚刚新建的分区号码</span></span><br><span class="line">Partition number (1-3, default 3): </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有文件系统编码表</span></span><br><span class="line">Hex code (type L to list all codes): L</span><br><span class="line"></span><br><span class="line"> 0  Empty           24  NEC DOS         81  Minix / old Lin bf  Solaris        </span><br><span class="line"> 1  FAT12           27  Hidden NTFS Win 82  Linux swap / So c1  DRDOS/sec (FAT-</span><br><span class="line"> 2  XENIX root      39  Plan 9          83  Linux           c4  DRDOS/sec (FAT-</span><br><span class="line"> 3  XENIX usr       3c  PartitionMagic  84  OS/2 hidden C:  c6  DRDOS/sec (FAT-</span><br><span class="line"> 4  FAT16 &lt;32M      40  Venix 80286     85  Linux extended  c7  Syrinx         </span><br><span class="line"> 5  Extended        41  PPC PReP Boot   86  NTFS volume set da  Non-FS data    </span><br><span class="line"> 6  FAT16           42  SFS             87  NTFS volume set db  CP/M / CTOS / .</span><br><span class="line"> 7  HPFS/NTFS/exFAT 4d  QNX4.x          88  Linux plaintext de  Dell Utility   </span><br><span class="line"> 8  AIX             4e  QNX4.x 2nd part 8e  Linux LVM       df  BootIt         </span><br><span class="line"> 9  AIX bootable    4f  QNX4.x 3rd part 93  Amoeba          e1  DOS access     </span><br><span class="line"> a  OS/2 Boot Manag 50  OnTrack DM      94  Amoeba BBT      e3  DOS R/O        </span><br><span class="line"> b  W95 FAT32       51  OnTrack DM6 Aux 9f  BSD/OS          e4  SpeedStor      </span><br><span class="line"> c  W95 FAT32 (LBA) 52  CP/M            a0  IBM Thinkpad hi eb  BeOS fs        </span><br><span class="line"> e  W95 FAT16 (LBA) 53  OnTrack DM6 Aux a5  FreeBSD         ee  GPT            </span><br><span class="line"> f  W95 Ext&#x27;d (LBA) 54  OnTrackDM6      a6  OpenBSD         ef  EFI (FAT-12/16/</span><br><span class="line">10  OPUS            55  EZ-Drive        a7  NeXTSTEP        f0  Linux/PA-RISC b</span><br><span class="line">11  Hidden FAT12    56  Golden Bow      a8  Darwin UFS      f1  SpeedStor      </span><br><span class="line">12  Compaq diagnost 5c  Priam Edisk     a9  NetBSD          f4  SpeedStor      </span><br><span class="line">14  Hidden FAT16 &lt;3 61  SpeedStor       ab  Darwin boot     f2  DOS secondary  </span><br><span class="line">16  Hidden FAT16    63  GNU HURD or Sys af  HFS / HFS+      fb  VMware VMFS    </span><br><span class="line">17  Hidden HPFS/NTF 64  Novell Netware  b7  BSDI fs         fc  VMware VMKCORE </span><br><span class="line">18  AST SmartSleep  65  Novell Netware  b8  BSDI swap       fd  Linux raid auto</span><br><span class="line">1b  Hidden W95 FAT3 70  DiskSecure Mult bb  Boot Wizard hid fe  LANstep        </span><br><span class="line">1c  Hidden W95 FAT3 75  PC/IX           be  Solaris boot    ff  BBT            </span><br><span class="line">1e  Hidden W95 FAT1 80  Old Minix      </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将分区3文件系统调整为 Linux LVM</span></span><br><span class="line">Hex code (type L to list all codes): 8e</span><br><span class="line">Changed type of partition &#x27;Linux&#x27; to &#x27;Linux LVM&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将上述修改写入磁盘</span></span><br><span class="line">Command (m for help): w</span><br><span class="line">The partition table has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line"></span><br><span class="line">WARNING: Re-reading the partition table failed with error 16: Device or resource busy.</span><br><span class="line">The kernel still uses the old table. The new table will be used at</span><br><span class="line">the next reboot or after you run partprobe(8) or kpartx(8)</span><br><span class="line">Syncing disks.</span><br></pre></td></tr></table></figure><h3 id="4-使新分区表生效"><a href="#4-使新分区表生效" class="headerlink" title="4. 使新分区表生效"></a>4. 使新分区表生效</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]# partprobe</span><br></pre></td></tr></table></figure><p>partprobe命令用于重读分区表,将磁盘分区表变化信息通知内核,请求操作系统重新加载分区表。</p><h3 id="5-查看新的分区结构"><a href="#5-查看新的分区结构" class="headerlink" title="5. 查看新的分区结构"></a>5. 查看新的分区结构</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]# fdisk -l</span><br><span class="line"></span><br><span class="line">Disk /dev/sda: 107.4 GB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk label type: dos</span><br><span class="line">Disk identifier: 0x00099ab9</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sda1   *        2048     2099199     1048576   83  Linux</span><br><span class="line">/dev/sda2         2099200    33554431    15727616   8e  Linux LVM</span><br><span class="line">/dev/sda3        33554432   209715199    88080384   8e  Linux LVM</span><br><span class="line"></span><br><span class="line">Disk /dev/mapper/centos-root: 14.4 GB, 14382268416 bytes, 28090368 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/mapper/centos-swap: 1719 MB, 1719664640 bytes, 3358720 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br></pre></td></tr></table></figure><p>可以看见新创建的<code>/dev/sda3</code>分区已列出。</p><h3 id="6-LVM扩展-VG-LV"><a href="#6-LVM扩展-VG-LV" class="headerlink" title="6. LVM扩展 VG &amp; LV"></a>6. LVM扩展 VG &amp; LV</h3><p><strong>PV（Physical Volume）</strong><br>物理卷，处于LVM最底层，可以是物理硬盘或者分区。</p><p><strong>VG（Volume Group）</strong><br>卷组，建立在PV之上，可以含有一个到多个PV。</p><p><strong>LV（Logical Volume）</strong><br>逻辑卷，建立在VG之上，相当于分区的概念。不过大小可以动态改变。</p><p>查看已有的VG，可见原有的一个VG对应1个PV两个LV：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]# vgs</span><br><span class="line">VG     #PV #LV #SN Attr   VSize   VFree</span><br><span class="line">centos   1   2   0 wz--n- &lt;15.00g    0</span><br></pre></td></tr></table></figure><p>查看LV列表，可见原有的<code>root</code>分区和<code>swap</code>分区挂载在<code>centos</code>这个VG上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]# lvs</span><br><span class="line">  LV   VG     Attr       LSize  Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  root centos -wi-ao---- 13.39g                                                    </span><br><span class="line">  swap centos -wi-ao----  1.60g   </span><br></pre></td></tr></table></figure><p>新建PV：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此处pvcreate引用上面创建的物理磁盘分区</span></span><br><span class="line">[root@gitlab ~]# pvcreate /dev/sda3</span><br><span class="line">  Physical volume &quot;/dev/sda3&quot; successfully created.</span><br></pre></td></tr></table></figure><p>扩展VG：</p><p>此处使用PV<code>/dev/sda3</code> 扩展VG <code>centos</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]# vgextend centos /dev/sda3</span><br><span class="line">  Volume group &quot;centos&quot; successfully extended</span><br></pre></td></tr></table></figure><p>再次查看VG，此时可见<code>centos</code>已由两个PV组成：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]# vgs</span><br><span class="line">VG     #PV #LV #SN Attr   VSize  VFree  </span><br><span class="line">centos   2   2   0 wz--n- 98.99g &lt;84.00g</span><br></pre></td></tr></table></figure><p>扩展LV：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此处的路径请根据实际情况填写</span></span><br><span class="line">[root@gitlab ~]# lvextend /dev/mapper/centos-root /dev/sda3 </span><br><span class="line">  Size of logical volume centos/root changed from 13.39 GiB (3429 extents) to 97.39 GiB (24932 extents).</span><br><span class="line">  Logical volume centos/root successfully resized.</span><br></pre></td></tr></table></figure><p>再次查看LV信息，可见LV容量已经增长：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此处的路径请根据实际情况填写</span></span><br><span class="line">[root@gitlab ~]# lvs</span><br><span class="line">LV   VG     Attr       LSize  Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">root centos -wi-ao---- 97.39g                                                    </span><br><span class="line">swap centos -wi-ao----  1.60g</span><br></pre></td></tr></table></figure><h3 id="7-XFS扩容"><a href="#7-XFS扩容" class="headerlink" title="7. XFS扩容"></a>7. XFS扩容</h3><p>使用<code>df -h</code>查看文件系统使用情况，容量仍未增长：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]# df -h</span><br><span class="line">Filesystem               Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs                 7.8G     0  7.8G   0% /dev</span><br><span class="line">tmpfs                    7.8G     0  7.8G   0% /dev/shm</span><br><span class="line">tmpfs                    7.8G  8.9M  7.8G   1% /run</span><br><span class="line">tmpfs                    7.8G     0  7.8G   0% /sys/fs/cgroup</span><br><span class="line">/dev/mapper/centos-root   98G  1.4G   97G   2% /</span><br><span class="line">/dev/sda1               1014M  194M  821M  20% /boot</span><br><span class="line">tmpfs                    1.6G     0  1.6G   0% /run/user/0</span><br></pre></td></tr></table></figure><p>是因为LVM是物理磁盘和文件系统的中间层，需要在实际的文件系统上执行扩容，才可最终生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]# xfs_growfs /dev/mapper/centos-root </span><br><span class="line">meta-data=/dev/mapper/centos-root isize=512    agcount=4, agsize=877824 blks</span><br><span class="line">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class="line">         =                       crc=1        finobt=0 spinodes=0</span><br><span class="line">data     =                       bsize=4096   blocks=3511296, imaxpct=25</span><br><span class="line">         =                       sunit=0      swidth=0 blks</span><br><span class="line">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class="line">log      =internal               bsize=4096   blocks=2560, version=2</span><br><span class="line">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class="line">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br><span class="line">data blocks changed from 3511296 to 25530368</span><br></pre></td></tr></table></figure><p>再次使用<code>df -h</code>查看文件系统使用情况，可见新增容量已生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab ~]# df -h</span><br><span class="line">Filesystem               Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs                 7.8G     0  7.8G   0% /dev</span><br><span class="line">tmpfs                    7.8G     0  7.8G   0% /dev/shm</span><br><span class="line">tmpfs                    7.8G  8.9M  7.8G   1% /run</span><br><span class="line">tmpfs                    7.8G     0  7.8G   0% /sys/fs/cgroup</span><br><span class="line">/dev/mapper/centos-root   98G  1.4G   97G   2% /</span><br><span class="line">/dev/sda1               1014M  194M  821M  20% /boot</span><br><span class="line">tmpfs                    1.6G     0  1.6G   0% /run/user/0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>rest API客户端实现之Retrofit</title>
      <link href="/2024/07/01/API%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E7%8E%B0%E4%B9%8BRetrofit/"/>
      <url>/2024/07/01/API%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E7%8E%B0%E4%B9%8BRetrofit/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img.inner.icu/file/fdb448c966aaf30c17db0.png" alt="img"></p><h2 id="什么是Retrofit"><a href="#什么是Retrofit" class="headerlink" title="什么是Retrofit"></a>什么是Retrofit</h2><p>官方是这样的描述的</p><p>A type-safe REST client for Android and Java.</p><p>使用注解来描述HTTP请求，默认会集成URL参数替换。还提供了自定义头信息，多请求体，文件上传下载，模拟响应等功能。</p><p>怎样描述API终端 在你发起第一个请求之前，你需要描述你需要与之交互的API终端。首先你需要创建一个接口并且定义一个方法。</p><h3 id="GitHubClient"><a href="#GitHubClient" class="headerlink" title="GitHubClient"></a>GitHubClient</h3><p>下面的代码定义了一个接口GitHubClient和一个方法reposForUser来请求给定用户的仓库列表。 @GET注解声明此请求使用HTTP GET方法。在定义的方法中，当调用reposForUser方法时，{user}路径将替换为给定的变量值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GitHubClient</span> &#123;  </span><br><span class="line"><span class="meta">@GET(&quot;/users/&#123;user&#125;/repos&quot;)</span></span><br><span class="line">Call&lt;List&lt;GitHubRepo&gt;&gt; <span class="title function_">reposForUser</span><span class="params">(</span></span><br><span class="line"><span class="params"><span class="meta">@Path(&quot;user&quot;)</span> String user</span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义了一个类，GitHubRepo，这个类包括返回数据的所有属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GitHubRepo</span> &#123;  </span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GitHubRepo</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于前面提到的JSON映射：GitHubClient接口定义了一个名为reposForUser的方法，返回类型为List 。 Retrofit确保服务器响应得到正确映射。</p><h3 id="Retrofit-REST-Client"><a href="#Retrofit-REST-Client" class="headerlink" title="Retrofit REST Client"></a>Retrofit REST Client</h3><p>在描述完APi接口和对象模型后，下面准备创建请求。Retrofit的所有请求的基础是Retrofit(2.0+)这个类。你可以使用构造器为所有请求设置一些常规选项，包括BaseURl和converter。</p><p>创建adapter后，可以创建一个客户端来执行请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">API_BASE_URL</span> <span class="operator">=</span> <span class="string">&quot;https://api.github.com/&quot;</span>;</span><br><span class="line"></span><br><span class="line">OkHttpClient.<span class="type">Builder</span> <span class="variable">httpClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.Builder();</span><br><span class="line"></span><br><span class="line">Retrofit.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span>  </span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Retrofit</span>.Builder()</span><br><span class="line">.baseUrl(API_BASE_URL)</span><br><span class="line">.addConverterFactory(</span><br><span class="line">GsonConverterFactory.create()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="type">Retrofit</span> <span class="variable">retrofit</span> <span class="operator">=</span>  </span><br><span class="line">builder</span><br><span class="line">.client(</span><br><span class="line">httpClient.build()</span><br><span class="line">)</span><br><span class="line">.build();</span><br><span class="line"></span><br><span class="line"><span class="type">GitHubClient</span> <span class="variable">client</span> <span class="operator">=</span>  retrofit.create(GitHubClient.class);  </span><br></pre></td></tr></table></figure><p>在上边的代码中我们定义了BaseURl是”<a href="https://api.github.com/%E2%80%9C,%E5%B9%B6%E4%B8%94%E4%BD%BF%E7%94%A8%E4%BA%86%E6%9C%80%E5%B0%91%E7%9A%84%E9%85%8D%E7%BD%AE%E3%80%82Retrofit%E5%8F%AF%E4%BB%A5%E6%9C%89%E6%9B%B4%E5%A4%9A%E7%9A%84%E9%85%8D%E7%BD%AE%EF%BC%8C%E4%BD%86%E6%98%AF%E5%9C%A8%E6%9C%AC%E4%BE%8B%E4%B8%AD%E4%B8%8D%E4%BD%BF%E7%94%A8%E3%80%82">https://api.github.com/“,并且使用了最少的配置。Retrofit可以有更多的配置，但是在本例中不使用。</a></p><h3 id="JSON-Mapping"><a href="#JSON-Mapping" class="headerlink" title="JSON Mapping"></a>JSON Mapping</h3><p>在大多数情况下，对服务器的请求和来自服务器的响应不是Java对象。 它们映射到一些其他格式中，如JSON。 GitHub的API使用JSON，在Retrofit2中，你需要显式的将一个转换器(convert)田家达Retrofit对象。</p><h3 id="Retrofit-in-Use"><a href="#Retrofit-in-Use" class="headerlink" title="Retrofit in Use"></a>Retrofit in Use</h3><p>在Retrofit 2中，您使用客户端获取call对象。一旦你对创建的call对象调用了.enqueue(异步请求)，请求将由Retrofit进行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create a very simple REST adapter which points the GitHub API endpoint.</span></span><br><span class="line"><span class="type">GitHubClient</span> <span class="variable">client</span> <span class="operator">=</span>  retrofit.create(GitHubClient.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fetch a list of the Github repositories.</span></span><br><span class="line">Call&lt;List&lt;GitHubRepo&gt;&gt; call =  </span><br><span class="line">client.reposForUser(<span class="string">&quot;fs-opensource&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Execute the call asynchronously. Get a positive or negative callback.</span></span><br><span class="line">call.enqueue(<span class="keyword">new</span> <span class="title class_">Callback</span>&lt;List&lt;GitHubRepo&gt;&gt;() &#123;  </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onResponse</span><span class="params">(Call&lt;List&lt;GitHubRepo&gt;&gt; call, Response&lt;List&lt;GitHubRepo&gt;&gt; response)</span> &#123;</span><br><span class="line"><span class="comment">// The network call was a success and we got a response</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> use the repository list and display it</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Call&lt;List&lt;GitHubRepo&gt;&gt; call, Throwable t)</span> &#123;</span><br><span class="line">        <span class="comment">// the network call was a failure</span></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> handle error</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Retrofit将返回一个方便的列表，你可以进一步使用它来显示您的应用程序中的数据。</p><h2 id="API终端"><a href="#API终端" class="headerlink" title="API终端"></a>API终端</h2><h3 id="怎样描述一个API终端"><a href="#怎样描述一个API终端" class="headerlink" title="怎样描述一个API终端"></a>怎样描述一个API终端</h3><p>我们在一个接口文件中描述我们的API终端。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GitHubClient</span> &#123;  </span><br><span class="line"><span class="meta">@GET(&quot;/users/&#123;user&#125;/repos&quot;)</span></span><br><span class="line">Call&lt;List&lt;GitHubRepo&gt;&gt; <span class="title function_">reposForUser</span><span class="params">(</span></span><br><span class="line"><span class="params"><span class="meta">@Path(&quot;user&quot;)</span> String user</span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在让我们来看看这些选项中的细节。</p><h3 id="HTTP-Method"><a href="#HTTP-Method" class="headerlink" title="HTTP Method"></a>HTTP Method</h3><p>在Java接口中使用注解来描述每一个API终端，最终处理请求。第一件事就是定义HTTP请求方法，如GET，POST，PUT，DELETE等。Retrofit为每个请求方法都提供了注解，你只需要为每个HTTP方法添加下面的注解即可： <code>@GET，@PSOT，@PUT，@DELETE，@PATCH，@HEAD</code>。</p><p>下面是几个简单的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FutureStudioClient</span> &#123;  </span><br><span class="line"><span class="meta">@GET(&quot;/user/info&quot;)</span></span><br><span class="line">Call&lt;UserInfo&gt; <span class="title function_">getUserInfo</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PUT(&quot;/user/info&quot;)</span></span><br><span class="line">    Call&lt;UserInfo&gt; <span class="title function_">updateUserInfo</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@Body</span> UserInfo userInfo</span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DELETE(&quot;/user&quot;)</span></span><br><span class="line">    Call&lt;Void&gt; <span class="title function_">deleteUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HTTP-Resource-Location"><a href="#HTTP-Resource-Location" class="headerlink" title="HTTP Resource Location"></a>HTTP Resource Location</h3><p>此外，你需要为你的注解添加相对与BaseURL的String参数来完成路径，例如 @GET（“&#x2F; user &#x2F; info”）。 在大多数情况下，您只会传递相对网址，而不传递完整网址（例如<a href="http://futurestud.io/api/user/info%EF%BC%89%E3%80%82">http://futurestud.io/api/user/info）。</a> 这具有的优点是，Retrofit只需要一次请求基本URL（<a href="http://futurestud.io)./">http://futurestud.io）。</a> 如果你要更改API基本网址，则只需在一个位置更改它。 此外，它使一些更高端的事情，如动态基本URL，更容易。 不过，你可以指定完整的URL。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FutureStudioClient</span> &#123;  </span><br><span class="line"><span class="meta">@GET(&quot;/user/info&quot;)</span></span><br><span class="line">Call&lt;UserInfo&gt; <span class="title function_">getUserInfo</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PUT(&quot;/user/info&quot;)</span></span><br><span class="line">    Call&lt;UserInfo&gt; <span class="title function_">updateUserInfo</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@Body</span> UserInfo userInfo</span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DELETE(&quot;/user&quot;)</span></span><br><span class="line">    Call&lt;Void&gt; <span class="title function_">deleteUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// example for passing a full URL</span></span><br><span class="line">    <span class="meta">@GET(&quot;https://futurestud.io/tutorials/rss/&quot;)</span></span><br><span class="line">    Call&lt;FutureStudioRssFeed&gt; <span class="title function_">getRssFeed</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Function-Name-Return-Type"><a href="#Function-Name-Return-Type" class="headerlink" title="Function Name &amp; Return Type"></a>Function Name &amp; Return Type</h3><p>Java方法声明:Call getUserInfo（）; 这包含三个部分：</p><p>方法名—getUserInfo 你可以自由定义方法名称。 Retrofit不在乎，它不会对功能产生任何影响。不过，你应该选择一个名称，这将有助于你和其他开发人员了解什么是API请求。</p><p>方法返回的类型—UserInfo 你必须定义你期望从服务器的什么样的数据。例如，当您请求某些用户信息时，您可以将其指定为Call 。 UserInfo类包含将保存用户数据的属性。 Retrofit会自动映射它，您不必进行任何手动解析。如果你想要原始响应，你可以使用ResponseBody而不是像UserInfo这样的特定类。如果你根本不在乎服务器响应什么，你可以使用Void。在所有这些情况下，你必须将它包装到一个类型的Retrofit Call &lt;&gt;类中。</p><p>方法传递的参数—此处为空 您可以将参数传递给方法。有各种各样的可能选项，此处列举一些：</p><p>@Body: 发送Java对象作为请求体 @Url: 使用动态地址 @Field: 以表单形式发送数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FutureStudioClient</span> &#123;  </span><br><span class="line"><span class="meta">@GET(&quot;/user/info&quot;)</span></span><br><span class="line">Call&lt;UserInfo&gt; <span class="title function_">getUserInfo</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PUT(&quot;/user/info&quot;)</span></span><br><span class="line">    Call&lt;Void&gt; <span class="title function_">updateUserInfo</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@Body</span> UserInfo userInfo</span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET</span></span><br><span class="line">    Call&lt;ResponseBody&gt; <span class="title function_">getUserProfilePhoto</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@Url</span> String profilePhotoUrl</span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Path-Parameters"><a href="#Path-Parameters" class="headerlink" title="Path Parameters"></a>Path Parameters</h3><p>REST API是基于动态URL构建的。 您可以通过替换部分URL来访问资源，例如获取我们网页上的第三个教程可能是<a href="http://futurestud.io/api/tutorials/3%E3%80%82">http://futurestud.io/api/tutorials/3。</a> 最后的3指定您要访问的页面。 Retrofit提供了一种简单的方法来替换路径参数。 例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GitHubClient</span> &#123;  </span><br><span class="line"><span class="meta">@GET(&quot;/users/&#123;user&#125;/repos&quot;)</span></span><br><span class="line">Call&lt;List&lt;GitHubRepo&gt;&gt; <span class="title function_">reposForUser</span><span class="params">(</span></span><br><span class="line"><span class="params"><span class="meta">@Path(&quot;user&quot;)</span> String user</span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，{user}值是动态的，并且将在请求发生时设置。 如果在URL中包含路径参数，则需要添加@Path（）函数参数，其中@Path值与URL中的占位符匹配（在本例中为@Path（“user”））。 如有必要，您可以使用多个占位符。 只需确保您始终具有匹配参数的确切数量。 您甚至可以使用可选的路径参数。</p><h3 id="Query-Parameters"><a href="#Query-Parameters" class="headerlink" title="Query Parameters"></a>Query Parameters</h3><p>动态URL的另一个大部分是查询参数 与路径参数不同，您不需要将它们添加到注释URL。 你可以简单地添加一个方法参数@Query（）和查询参数名称，描述类型，你很好去。 Retrofit会自动将其附加到请求。 如果传递一个空值作为查询参数，Retrofit将忽略它。 您还可以添加多个查询参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FutureStudioClient</span> &#123;</span><br><span class="line">  <span class="meta">@GET(&quot;/tutorials&quot;)</span></span><br><span class="line">  Call&lt;List&lt;Tutorial&gt;&gt; <span class="title function_">getTutorials</span><span class="params">(</span></span><br><span class="line"><span class="params">          <span class="meta">@Query(&quot;page&quot;)</span> Integer page</span></span><br><span class="line"><span class="params">  )</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GET(&quot;/tutorials&quot;)</span></span><br><span class="line">  Call&lt;List&lt;Tutorial&gt;&gt; <span class="title function_">getTutorials</span><span class="params">(</span></span><br><span class="line"><span class="params">          <span class="meta">@Query(&quot;page&quot;)</span> Integer page,</span></span><br><span class="line"><span class="params">          <span class="meta">@Query(&quot;order&quot;)</span> String order,</span></span><br><span class="line"><span class="params">          <span class="meta">@Query(&quot;author&quot;)</span> String author,</span></span><br><span class="line"><span class="params">          <span class="meta">@Query(&quot;published_at&quot;)</span> Date date</span></span><br><span class="line"><span class="params">  )</span>;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p>在上面的例子中，你可以使用第二个方法来替换第一个方法，只需要把其他的值设置为null即可。</p><h2 id="创建一个可复用的客户端"><a href="#创建一个可复用的客户端" class="headerlink" title="创建一个可复用的客户端"></a>创建一个可复用的客户端</h2><p>The ServiceGenerator Retrofit对象及其构建器是所有请求的核心。 在这里，你可以配置和准备请求，响应，认证，日志记录和错误处理。 让我们从简单的代码开始。 在其当前状态下，它仅定义一种方法为给定类&#x2F;接口创建基本REST客户端，该接口从接口返回服务类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceGenerator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BASE_URL</span> <span class="operator">=</span> <span class="string">&quot;https://api.github.com/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Retrofit retrofit;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Retrofit.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Retrofit</span>.Builder()</span><br><span class="line">                    .baseUrl(BASE_URL)</span><br><span class="line">                    .addConverterFactory(GsonConverterFactory.create());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OkHttpClient.<span class="type">Builder</span> <span class="variable">httpClient</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.Builder();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; S <span class="title function_">createService</span><span class="params">(Class&lt;S&gt; serviceClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> retrofit.create(serviceClass);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ServiceGenerator类使用Retrofit的Retrofit构造器创建具有BaseURL（BASE_URL）的新REST客户端。 例如，GitHub的API的BaseURL位于<a href="https://api.github.com/%E3%80%82">https://api.github.com/。</a></p><p>createService方法将serviceClass（它是API请求的注释接口）作为参数，并从中创建一个可用的客户端。 在生成的客户端上，您将能够执行网络请求。</p><h3 id="Why-Is-Everything-Declared-Static-Within-the-ServiceGenerator"><a href="#Why-Is-Everything-Declared-Static-Within-the-ServiceGenerator" class="headerlink" title="Why Is Everything Declared Static Within the ServiceGenerator?"></a>Why Is Everything Declared Static Within the ServiceGenerator?</h3><p>我们想在整个应用程序中使用相同的对象（OkHttpClient，Retrofit，…），只打开一个套接字连接，处理所有的请求和响应，包括缓存和更多。 通常的做法是只使用一个OkHttpClient实例来重用开放套接字连接。 这意味着，我们需要通过依赖注入或使用静态字段将OkHttpClient注入到此类中。 正如你所看到的，我们选择使用静态字段。 并且因为我们在这个类中使用OkHttpClient，我们需要使所有字段和方法静态。</p><p>除了加快速度，我们可以在移动设备上节省一些有价值的内存，当我们不必一遍又一遍地重新创建相同的对象。</p><h3 id="Using-the-ServiceGenerator"><a href="#Using-the-ServiceGenerator" class="headerlink" title="Using the ServiceGenerator"></a>Using the ServiceGenerator</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">GitHubClient</span> <span class="variable">client</span> <span class="operator">=</span> ServiceGenerator.createService(GitHubClient.class);  </span><br></pre></td></tr></table></figure><h3 id="Preparing-Logging"><a href="#Preparing-Logging" class="headerlink" title="Preparing Logging"></a>Preparing Logging</h3><p>使用Retrofit 2进行日志记录是由称为HttpLoggingInterceptor的拦截器完成的。 您需要向OkHttpClient添加此拦截器的实例。 例如，您可以通过以下方式解决它：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceGenerator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BASE_URL</span> <span class="operator">=</span> <span class="string">&quot;https://api.github.com/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Retrofit retrofit;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Retrofit.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Retrofit</span>.Builder()</span><br><span class="line">                    .baseUrl(BASE_URL)</span><br><span class="line">                    .addConverterFactory(GsonConverterFactory.create());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">HttpLoggingInterceptor</span> <span class="variable">logging</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">HttpLoggingInterceptor</span>()</span><br><span class="line">                    .setLevel(HttpLoggingInterceptor.Level.BODY);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OkHttpClient.<span class="type">Builder</span> <span class="variable">httpClient</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.Builder();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; S <span class="title function_">createService</span><span class="params">(</span></span><br><span class="line"><span class="params">        Class&lt;S&gt; serviceClass)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!httpClient.interceptors().contains(logging)) &#123;</span><br><span class="line">            httpClient.addInterceptor(logging);</span><br><span class="line">            builder.client(httpClient.build());</span><br><span class="line">            retrofit = builder.build();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> retrofit.create(serviceClass);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一些事情你必须知道。 首先，确保你没有不小心多次添加拦截器!通过httpClient.interceptors().contains(logging)来检查日志拦截器已经存在。 其次，确保不在每次createService调用上创建新的对象。 否则，将会使ServiceGenerator失去意义。</p><h3 id="Prepare-Authentication"><a href="#Prepare-Authentication" class="headerlink" title="Prepare Authentication"></a>Prepare Authentication</h3><p>需要在创建客户端时传递附加参数到createService。</p><p>让我们看一个Hawk身份验证的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceGenerator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BASE_URL</span> <span class="operator">=</span> <span class="string">&quot;https://api.github.com/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Retrofit retrofit;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Retrofit.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Retrofit</span>.Builder()</span><br><span class="line">                    .baseUrl(BASE_URL)</span><br><span class="line">                    .addConverterFactory(GsonConverterFactory.create());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">HttpLoggingInterceptor</span> <span class="variable">logging</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">HttpLoggingInterceptor</span>()</span><br><span class="line">                    .setLevel(HttpLoggingInterceptor.Level.BODY);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OkHttpClient.<span class="type">Builder</span> <span class="variable">httpClient</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.Builder();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; S <span class="title function_">createService</span><span class="params">(</span></span><br><span class="line"><span class="params">            Class&lt;S&gt; serviceClass, <span class="keyword">final</span> HawkCredentials credentials)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (credentials != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">HawkAuthenticationInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span></span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">HawkAuthenticationInterceptor</span>(credentials);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!httpClient.interceptors().contains(interceptor)) &#123;</span><br><span class="line">                httpClient.addInterceptor(interceptor);</span><br><span class="line"></span><br><span class="line">                builder.client(httpClient.build());</span><br><span class="line">                retrofit = builder.build();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> retrofit.create(serviceClass);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>createService现在具有HawkCredentials的第二个参数。 如果传递非空值，它将创建必要的Hawk身份验证拦截器并将其添加到Retrofit客户端。 我们还需要重建Retrofit以将更改应用到下一个请求。</p><h2 id="URL的处理与解析"><a href="#URL的处理与解析" class="headerlink" title="URL的处理与解析"></a>URL的处理与解析</h2><h3 id="Url-Handling-Introduction"><a href="#Url-Handling-Introduction" class="headerlink" title="Url Handling Introduction"></a>Url Handling Introduction</h3><p>在Retrofit 2中，所有的URL都是使用由HttpUrl类来解决的，它是由OkHttp3提供给你的。 尽管如此，它引入了您需要处理您的应用程序中的所有网址的方式的更改：BaseURL和endpointURl以及为特定请求定义的任何动态网址。</p><p>请记住：Retrofit 2中的网址会像网页上的链接一样处理： … 。</p><h3 id="baseUrl-Resolution"><a href="#baseUrl-Resolution" class="headerlink" title="baseUrl Resolution"></a>baseUrl Resolution</h3><p>使用Retrofit，您需要一个总是具有相同BaseURL的特定API。这个BaseURl共享相同的方案和主机，您可以在一个地方(使用Retrofit.Builder())定义它，并在必要时更改它，而不必触及应用程序中的每个终端。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Retrofit.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Retrofit</span>.Builder().baseUrl(<span class="string">&quot;https://your.base.url/api/&quot;</span>);</span><br></pre></td></tr></table></figure><p>BaseURL用于每个请求，任何终端（如@GET等）都将针对此地址解析。BaseURL必修以斜杠结尾：&#x2F;。具有相对路径地址的每个终端定义将正确解析，因为它将自身附加到已经定义或包括路径参数的BaseURL。</p><p>让我们来看一个例子：</p><h1 id="Good-Practice"><a href="#Good-Practice" class="headerlink" title="Good Practice"></a>Good Practice</h1><p>base url: <a href="https://futurestud.io/api/">https://futurestud.io/api/</a><br>endpoint: my&#x2F;endpoint<br>Result: <a href="https://futurestud.io/api/my/endpoint">https://futurestud.io/api/my/endpoint</a></p><h1 id="Bad-Practice"><a href="#Bad-Practice" class="headerlink" title="Bad Practice"></a>Bad Practice</h1><p>base url: <a href="https://futurestud.io/api">https://futurestud.io/api</a><br>endpoint: &#x2F;my&#x2F;endpoint<br>Result: <a href="https://futurestud.io/my/endpoint">https://futurestud.io/my/endpoint</a><br>上面的示例说明了如果你不以斜杠结尾你的BaseURl的api路径参数将被忽略，并从生成的请求网址中删除。</p><p>实际上，Retrofit帮助你，如果你传递一个基本url没有尾部斜线。 它会抛出异常，告诉你，你的基本url需要以斜杠结尾。</p><h3 id="Absolute-Urls"><a href="#Absolute-Urls" class="headerlink" title="Absolute Urls"></a>Absolute Urls</h3><p>你可以将绝对url传递给你的端点url。 尽管如此，这种技术可能需要在您的应用程序中调用适当的端点。 随着时间的推移，您的后端将发布一个新的API版本。 根据版本控制的类型，让我们假设您的后端开发人员选择在网址中的API版本。 您需要将基本网址从v2压缩到v3。 此时，您必须处理API v3引入的所有突变。 要依赖于所选的v2端点，可以使用绝对URL来直接指定API版本。</p><h1 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h1><p>base url: <a href="https://futurestud.io/api/v3/">https://futurestud.io/api/v3/</a><br>endpoint: my&#x2F;endpoint<br>Result: <a href="https://futurestud.io/api/v3/my/endpoint">https://futurestud.io/api/v3/my/endpoint</a></p><h1 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h1><p>base url: <a href="https://futurestud.io/api/v3/">https://futurestud.io/api/v3/</a><br>endpoint: &#x2F;api&#x2F;v2&#x2F;another&#x2F;endpoint<br>Result: <a href="https://futurestud.io/api/v2/another/endpoint">https://futurestud.io/api/v2/another/endpoint</a><br>在更改BaseURL的情况下，你将自动更需吧所有端点以使用新的URL和请求。 可以看到，示例1的工作原理与预期一样，只是将端点url附加到针对v3的API调用的基本URL。</p><p>示例2说明了将基本URL升级到v3并仍然使用所选端点的API v2的情况。 这可能是由于您的客户端的巨大升级造成的，并且您仍然希望从其他端点的API v3的所有其他好处中获益。</p><h3 id="Dynamic-Urls-or-Passing-a-Full-Url"><a href="#Dynamic-Urls-or-Passing-a-Full-Url" class="headerlink" title="Dynamic Urls or Passing a Full Url"></a>Dynamic Urls or Passing a Full Url</h3><p>使用Retrofit 2，您可以将给定的URL传递到端点，然后用于请求。也就是说，如果您已使用https定义了BaseURL，并且想要确保应用程序中的所有其他请求也都使用https，那么你只需使用双斜线&#x2F;&#x2F;开始请求网址即可。 这是Web中的常见做法，以避免浏览器在同一页面上使用安全和不安全的资源时发出警告。</p><h1 id="Example-3-—-completely-different-url"><a href="#Example-3-—-completely-different-url" class="headerlink" title="Example 3 — completely different url"></a>Example 3 — completely different url</h1><p>base url: <a href="http://futurestud.io/api/">http://futurestud.io/api/</a><br>endpoint: <a href="https://api.futurestud.io/">https://api.futurestud.io/</a><br>Result: <a href="https://api.futurestud.io/">https://api.futurestud.io/</a></p><h1 id="Example-4-—-Keep-the-base-url’s-scheme"><a href="#Example-4-—-Keep-the-base-url’s-scheme" class="headerlink" title="Example 4 — Keep the base url’s scheme"></a>Example 4 — Keep the base url’s scheme</h1><p>base url: <a href="https://futurestud.io/api/">https://futurestud.io/api/</a><br>endpoint: &#x2F;&#x2F;api.futurestud.io&#x2F;<br>Result: <a href="https://api.futurestud.io/">https://api.futurestud.io/</a></p><h1 id="Example-5-—-Keep-the-base-url’s-scheme"><a href="#Example-5-—-Keep-the-base-url’s-scheme" class="headerlink" title="Example 5 — Keep the base url’s scheme"></a>Example 5 — Keep the base url’s scheme</h1><p>base url: <a href="http://futurestud.io/api/">http://futurestud.io/api/</a><br>endpoint: &#x2F;&#x2F;api.github.com<br>Result: <a href="http://api.github.com/">http://api.github.com</a><br>示例3显示了在使用完全不同的URL时替换BaseURL。 此示例在请求具有不同位置的文件或图像时很有用，例如某些文件在您自己的服务器上，而其他文件或图像存储在Amazon的S3上。 您只将该位置作为网址接收并使用Retrofit，您可以传递请求端点的完整网址。</p><p>如前所述，您可以保留BaseURL的方案。 在示例4中，我们不使用API的路径段，而是使用子域。 我们仍然想保留以前定义的方案，因此只传递带有前导&#x2F;&#x2F;的完整网址。</p><p>示例5使用与定义的BaseURL相同的方案，但用给定的端点url替换主机和路径段。</p><h3 id="在运行时更换BaseURL"><a href="#在运行时更换BaseURL" class="headerlink" title="在运行时更换BaseURL"></a>在运行时更换BaseURL</h3><p>The Core: ServiceGenerator ServiceGenerator使用多个静态字段和一个String常量API_BASE_URL，它保存API基址url：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceGenerator</span> &#123;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">API_BASE_URL</span> <span class="operator">=</span> <span class="string">&quot;http://futurestud.io/api&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Retrofit retrofit;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Retrofit.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Retrofit</span>.Builder()</span><br><span class="line">                    .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                    .baseUrl(API_BASE_URL);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OkHttpClient.<span class="type">Builder</span> <span class="variable">httpClient</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.Builder();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// No need to instantiate this class.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ServiceGenerator</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; S <span class="title function_">createService</span><span class="params">(Class&lt;S&gt; serviceClass, AccessToken token)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">authToken</span> <span class="operator">=</span> token.getTokenType().concat(token.getAccessToken());</span><br><span class="line">        <span class="keyword">return</span> createService(serviceClass, authToken);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// more methods</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Adjusting-the-ServiceGenerator"><a href="#Adjusting-the-ServiceGenerator" class="headerlink" title="Adjusting the ServiceGenerator"></a>Adjusting the ServiceGenerator</h3><p>通过此设置，您无需在运行时更改API_BASE_URL常量。假如你在源代码中改变它，编译一个新的.apk并再次测试它，这是非常不方便，如果你正在使用多个API部署，我们将对ServiceGenerator类进行小的更改：</p><p>复制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceGenerator</span> &#123;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">apiBaseUrl</span> <span class="operator">=</span> <span class="string">&quot;http://futurestud.io/api&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Retrofit retrofit;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Retrofit.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Retrofit</span>.Builder()</span><br><span class="line">                    .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                    .baseUrl(apiBaseUrl);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OkHttpClient.<span class="type">Builder</span> <span class="variable">httpClient</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.Builder();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// No need to instantiate this class.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ServiceGenerator</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">changeApiBaseUrl</span><span class="params">(String newApiBaseUrl)</span> &#123;</span><br><span class="line">        apiBaseUrl = newApiBaseUrl;</span><br><span class="line"></span><br><span class="line">        builder = <span class="keyword">new</span> <span class="title class_">Retrofit</span>.Builder()</span><br><span class="line">                        .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                        .baseUrl(apiBaseUrl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; S <span class="title function_">createService</span><span class="params">(Class&lt;S&gt; serviceClass, AccessToken token)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">authToken</span> <span class="operator">=</span> token.getTokenType().concat(token.getAccessToken());</span><br><span class="line">        <span class="keyword">return</span> createService(serviceClass, authToken);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// more methods</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将常量API_BASE_URL重命名为非最终字段apiBaseUrl。添加新的静态方法changeApiBaseUrl（String newApiBaseUrl），它将更改apiBaseUrl变量。 它还会创建一个新版本的Retrofit.Builder实例构建器。 因为我们正在为请求重新使用构建器,如果我们不创建一个新的实例，所有的请求仍然会违反原来的apiBaseUrl值。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）</title>
      <link href="/2024/07/01/wordpress%E5%BB%BA%E7%AB%99/"/>
      <url>/2024/07/01/wordpress%E5%BB%BA%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h1 id="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"><a href="#外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）" class="headerlink" title="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></a>外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）</h1><p>对于做外贸来说，拥有自己的外贸独立网站真的非常重要。在外贸领域，如今各平台竞争激烈，规则多，成本高，价格战、政策变化快，还存在封店风险等等因素。在这种情况下，拥有外贸独立站就能很好规避上面所提到的弊端。正如<strong>你可以不用，但不能没有</strong>。而非二选一，就好比左右腿相辅相成一样，平台和独立站两者共同发展才能走得更稳健。</p><p>然而，对那些想做外贸独立站，而不会搭建网站的人来说，这篇<a href="https://guomuyu.com/tag/website-building-tutorial">外贸建站</a>教程，从域名注册、主机购买、Wordpress安装、页面设计、到网站上线，将手把手教会你从0到1搭建一个外贸独立站完整流程，即使你是没有建站基础的新手，也能学会使用WordPress搭建外贸网站，无需写代码掌握编程知识。</p><h1 id="展示效果"><a href="#展示效果" class="headerlink" title="展示效果"></a><strong>展示效果</strong></h1><p>这是花了不到一小时搭建的一个B2B外贸网站， 哪怕你是不懂任何代码的新手，对于网站搭建方面也一无所知，跟着本教程也可以轻松做出来。<a href="https://guomuyu.com/go/?url=aHR0cHM6Ly93ZWJzaXRlZGVtb3MubmV0L3NpZXJyYS1pbmR1c3RyeS0wMi8=">点击查看效果演示</a>是不是很简单，先鲁莽的行动起来“把双手弄脏”，跟着本教程<img src="https://img.inner.icu/file/78e6061d3dbe31fd9f6e2.gif" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><h1 id="外贸建站教程：WordPress自建外贸独立站"><a href="#外贸建站教程：WordPress自建外贸独立站" class="headerlink" title="外贸建站教程：WordPress自建外贸独立站"></a><strong>外贸建站教程：WordPress自建外贸独立站</strong></h1><p>在搭建外贸独立站之前，需要进行一些准备工作，包括选择并购买合适的域名和选择可靠的主机服务器托管提供商。然而对于从事跨境外贸业务，域名和主机首选国外服务商，千万别选国内的。</p><p><strong>域名</strong>，就是网站地址，例如guomuyu.com这样的，用户通过它就能访问到我们搭建好的网站。选择一个与你的品牌和业务相关的域名网址。确保域名简洁易记、易拼写，并且能够反映你的企业形象和定位。关于外贸建站域名的选择请看《<a href="https://guomuyu.com/how-to-choose-a-domain-name.html">外贸建站：选择域名需要注意什么？</a>》。</p><p><strong>主机</strong>，安装建站系统存放网站内容的地方。我们可以理解成一栋房子里面存放了图片、文字、程序代码等文件。如何选择一个可靠的主机服务商来托管你的网站，主机的性能和稳定性对于网站的运行和访问速度至关重要。请看《<a href="https://guomuyu.com/web-hosting-compare.html">外贸建站：如何选择合适的主机服务器</a>》。</p><p><strong>外贸建站主机和域名为何一定要选国外服务商？</strong></p><ul><li>外贸业务主要针对国外用户，网站托管在国外主机上对于国外用户打开的速度更快，对搜索引擎的优化会更好。</li><li>不需要备案，国内的主机你需要备案，虽然不麻烦，但是需要等待一段时间，这个过程具体时间不确定。</li></ul><h2 id="注册网站域名"><a href="#注册网站域名" class="headerlink" title="注册网站域名"></a><strong>注册网站域名</strong></h2><p>第一步首先，注册并购买网站域名，选择国外域名平台比如NameSilo、Namecheap等，本教程推荐使用Namecheap平台它是目前性价比最高的国外域名注册商。</p><p>1、在首页搜索框中输入你想要的域名，然后点击Search(搜索)查看是否还能注册。</p><p><img src="https://img.inner.icu/file/826c5af4a5cc84e83f192.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）">2、如果显示.com后缀域名能注册购买，优先选择.com后缀域名，然后点击 Add to cart按钮添加到购物车。</p><p><img src="https://img.inner.icu/file/f6645d5534931e9690a72.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>3、可以看到提示的优惠价格以及折扣码信息 <strong>，</strong>然后点击 Checkout。</p><p><img src="https://img.inner.icu/file/215ca8ac8f15136bd9948.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）">4、在Promo Codec处输入优惠码：*<strong>NEWCOM598*</strong> ，然后点击Apply按钮，会提示需要登陆或者注册一个账号，点击 create a free account这串英文进行注册。</p><p><img src="https://img.inner.icu/file/8117395d0fd4bf8ef06f9.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>5、按照提示注册账号，输入用户名、密码，然后输入有效电子邮件地址，接着点击下面的进行人机身份验证，最后点击创建账户。</p><p><img src="https://img.inner.icu/file/e49a25e8688aa687fa0b0.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>6，完成账号注册后，会自动跳转 Confirm Order 页面，在Promo Codec处再次输入优惠码：NEWCOM598，点击Apply按钮提示折扣已使用生效，然后点击【Confirm Order】。</p><p><img src="https://img.inner.icu/file/2178b6a4289b167e8d1a5.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>7，接着需要填写以下信息如下图，然后点击Continue。</p><p><img src="https://img.inner.icu/file/8e8f7dc5a2ad70c3c651c.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"><a href="https://guomuyu.com/wp-content/uploads/2024/04/1720669628-namecheap-8.jpg"><img src="https://img.inner.icu/file/5b7001ee18ee60a08ff51.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></a></p><p>8，选择付款方式，可以使用双币信用卡、 PayPal跟账户余额付款。</p><p><img src="https://img.inner.icu/file/11c377e8cd02ef30a0d66.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>9，最后，核对订单没问题点击继续完成支付。</p><p><img src="https://img.inner.icu/file/6c3401e484bc33f306b0b.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><blockquote><p>付完款后，系统会发一封验证邮件送到之前注册账号时填写的邮箱，需要必在24~48小时之内完成邮箱验证，否则会影响到域名的正常使用。</p></blockquote><h2 id="购买网站主机"><a href="#购买网站主机" class="headerlink" title="购买网站主机"></a><strong>购买网站主机</strong></h2><p>对于外贸建站，如何选择国外的主机呢？主要从知名度、价格、性能、服务以及简单易用这几个因素挑选主机服务商。这里推荐用<a href="https://guomuyu.com/tag/cloudways">Cloudways</a>主机来搭建我们的外贸独立站。</p><p>Cloudways是一家提供云服务器托管服务的公司。他们通过简化云服务器的管理流程，让用户能够轻松部署、管理和维护他们的网站和应用程序，而无需深入了解复杂的服务器技术。不同于虚拟主机，它拥有独立IP地址，SEO优化、安全、性能方面都会优于虚拟主机。</p><h3 id="注册-Cloudways账户"><a href="#注册-Cloudways账户" class="headerlink" title="注册****Cloudways账户"></a><strong>注册****Cloudways账户</strong></h3><p><a href="https://guomuyu.com/go/?url=aHR0cHM6Ly9wbGF0Zm9ybS5jbG91ZHdheXMuY29tL3NpZ251cD9pZD0xNjI5NTMxJmFtcDtjb3Vwb249Y2x2cHMmYW1wO2RhdGExPWd1b211eXU=">👉 立即注册 Cloudways 账户，自动带优惠+免实名注册 👈</a></p><p>第一步：打开Cloudways官方网站（<a href="https://guomuyu.com/go/?url=aHR0cHM6Ly93d3cuY2xvdWR3YXlzLmNvbS9lbi8/aWQ9MTYyOTUzMQ==">www.cloudways.com</a>），单击右上角“Start Free”按钮。</p><p><img src="https://img.inner.icu/file/c3dfd5ce1d075aa89e8c8.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>这里你可以直接使用 Linkedin 或者谷歌账户注册，也可以使用邮箱注册填写表单，输入你的姓名、电子邮件地址（邮箱地址推荐 Gmail 邮箱，小编亲测用国内邮箱都不会被允许注册）、密码，然后单击“Start Free”按钮。</p><blockquote><p><strong>在注册页面的 Promo Code 中填写优惠码 「clvps」 可获得前3个月减免10%的优惠</strong></p></blockquote><p>此时进入cloudways后台要验证账号，点击顶部「VERIFY YOUR ACCOUNT」 按钮。</p><p><a href="https://guomuyu.com/wp-content/uploads/2024/03/cloudways1-2.jpg"><img src="https://img.inner.icu/file/6b70a47320db00d29c1c1.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></a>Cloudways会要求校验我们的手机跟邮箱，只需要使用手机验证短信和邮箱即可。</p><p><img src="https://img.inner.icu/file/575cb5a40e29ae979ad10.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><h3 id="Cloudways账号升级"><a href="#Cloudways账号升级" class="headerlink" title="Cloudways账号升级"></a><strong>Cloudways账号升级</strong></h3><p>注册验证成功后还需要账户升级，Cloudways提供了为期3天的免费试用体验。如果在试用期结束之前未绑定信用卡以升级账户，试用期间所建立的网站和所有设置都将丢失。所以没必要等到期再升级成正式用户，建议注册成功后直接绑卡升级。</p><p>此外，Cloudways采用后付费的付款方式，根据你的主机运行时间计算费用。先使用后扣费，按月付款。不是想使用了，删除配置的主机服务器，停止计费，灵活性强，续费也不涨价。绑定信用卡后，并不会立即扣费。例如，如果你本月使用了10天的服务器，将会扣除对应的费用；若使用了20天的服务器，则会扣除20天的费用。</p><p>在后台首页点击右上角头像，再点击 My Account<br><img src="https://img.inner.icu/file/795165cb471f9b6ee6309.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）">然后点击左侧菜单的 Payment &amp; Address，会提示你填写Company信息，按照实际情况写公司或者自己的名字即可。</p><p><img src="https://img.inner.icu/file/b053e3eaa2aadcf56e554.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"><img src="https://img.inner.icu/file/48bb5c60441b521de53cb.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"><img src="https://img.inner.icu/file/8f72eefdeac189caf03ae.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）">]</p><p>在支付授权页面填写好自己的信用卡信息，填写完成之后，点击【Authorize】按钮，进行授权。</p><p><img src="https://img.inner.icu/file/ff421ed59e9624cd4df4a.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>授权之后Cloudways会从你的信用卡中扣取1美元用于支付验证，验证成功，将自动撤销扣费。账号升级成功之后，你的账号中只要有服务器在运行，就会开始计算账单。<br><img src="https://img.inner.icu/file/b4d6fdba92d6f70e1f1c0.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><h2 id="配置Cloudways主机并-安装WordPress"><a href="#配置Cloudways主机并-安装WordPress" class="headerlink" title="配置Cloudways主机并****安装WordPress"></a><strong>配置Cloudways主机并****安装WordPress</strong></h2><p>接下来配置主机服务器以及安装WordPress，点击打开Cloudways跳转到后台首页，点击「**+Add Server**」添加服务器。<br><img src="https://img.inner.icu/file/b6e69b17593a9bdb6ed6c.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>进入服务器的一个配置界面，根据自己的需求，选择合适的服务器提供商和配置，然后点击Launch Now。</p><p><img src="https://img.inner.icu/file/d94294b39d26d840a6942.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p><img src="https://img.inner.icu/file/7ed025a21d13c14eeebeb.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>等待几分钟，服务器左边的红色点变成绿色，代表服务器运行正常状态，网站就创建好了。</p><p><img src="https://img.inner.icu/file/5d6257f4ec288e3130fff.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>点击Applications标签，可以切换到应用列表，可以查看当前的网站应用列表。</p><p><img src="https://img.inner.icu/file/dd25401ebba953a5d81ef.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>点击应用名称可以进入应用详情页面，在应用详情页面可以看到网站所有信息下图的界面。<img src="https://img.inner.icu/file/19a3fab8e334cd24273d0.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p><img src="https://img.inner.icu/file/0cf30bb46cada5d4613cb.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><h2 id="域名解析到Cloudways主机"><a href="#域名解析到Cloudways主机" class="headerlink" title="域名解析到Cloudways主机"></a><strong>域名解析到Cloudways主机</strong></h2><p>经过上面三个步骤后，我们已经有了域名和主机服务器，那么接下来就是将两者关联绑定起来才能访问。这一步操作的专业说法是，域名解析。首先需要先获取服务器的IP地址，可以在应用详情页面找到服务器IP地址并复制下来。</p><p><img src="https://img.inner.icu/file/0cf30bb46cada5d4613cb.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>如果域名从Namecheap购买的，那么成功登录Namecheap后台，点击左侧Domain list，然后依次点击MANAGE&gt;Advanced DNS，会看到有默认的两条记录删除掉。</p><p><img src="https://img.inner.icu/file/94ca20a56a3f4153c61f8.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>2，然后点击 ADD NEW RECORD 新增两条 A Record类型记录，如下图所示</p><p><img src="https://img.inner.icu/file/4e8d1dcc25933a5fb7311.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>接下来，回到Cloudways后台点击Applications标签，在应用详情页面中，切换到Domain Management界面进行域名绑定。</p><p><img src="https://img.inner.icu/file/e9fe3559c123e1cd2b2e3.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"><img src="https://img.inner.icu/file/6d163a27003417132bf98.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>在弹出框中输入域名，并点击【Add Domain】，将域名绑定到网站。</p><p><img src="https://img.inner.icu/file/87d9670e728324b428f92.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>绑定完成之后还需要将域名设置从主域名。在弹出框中点击【Set As Primary】按钮确认设置为主域名。</p><p><img src="https://img.inner.icu/file/f60a752a026244470f489.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>设置完成之后，可以看到主域名已经换成自己绑定的域名。</p><p><img src="https://img.inner.icu/file/099c3e513387aa5ba93ed.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><h2 id="安装SSL证书服务"><a href="#安装SSL证书服务" class="headerlink" title="安装SSL证书服务"></a><strong>安装SSL证书服务</strong></h2><p>HTTPS是当前的标准网络协议，如果网站仍在使用HTTP，可能会影响其在搜索引擎结果中的排名（SEO）。在Cloudways中只需配置SSL证书，就可以轻松地为网站启用HTTPS。当用户通过浏览器访问时会显示一个绿锁标志，表示网站是安全的增加用户的信任。</p><p>点击“Applications”标签，在应用详情里选择“SSL Certificate”，填写如下信息。然后点击 <strong>「INSTALL CERTIFICATE」</strong>，等待SSL安装成功这样一来，网站将获得加密保护，提升安全性，并且有助于提升在搜索引擎中的排名。<img src="https://img.inner.icu/file/8f612c8af5ce2ba9db721.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p><img src="https://img.inner.icu/file/d871b24b776976ff8d44f.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><ul><li><strong>证书选择</strong>：Cloudways默认提供Let’s Encrypt证书，这是一个免费的SSL证书。对于大多数网站来说，Let’s Encrypt证书已经足够满足安全需求。</li><li><strong>邮箱地址</strong>：输入你的邮箱地址即可。</li><li><strong>域名</strong>：在输入域名时，建议不要带有www前缀，以避免在配置域名时出现问题，如：guomuyu.com确保正确拼写以便后续的设置和部署。</li></ul><p>当SSL证书安装完成后，访问你的网站就能看到网址前面出现了一个小锁，这就说明HTTPS已经开启成功了。</p><p><img src="https://img.inner.icu/file/845c3ad870493d4399501.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><h2 id="设置企业邮箱"><a href="#设置企业邮箱" class="headerlink" title="设置企业邮箱"></a><strong>设置企业邮箱</strong></h2><p>我们在做B2C外贸独立站时，或者做B2B的企业展示站&#x2F;询盘站，都需要在网站里提供邮件通知功能，尤其是B2C电商独立站。</p><p>如果你有使用Cloudways来搭建你的网站的话，你可能会遇到网站的域名邮箱设置问题，Cloudways与一些主机服务商自带域名邮箱不同，Cloudways并不提供自带的域名邮箱功能。但是，仍然可以通过一些方法来添加和设置网站域名邮箱。请看《<a href="https://guomuyu.com/how-to-domain-name-when-you-use-cloudway.html">Cloudways教程-如何添加网站的域名邮箱</a>》</p><h2 id="登陆WordPress后台"><a href="#登陆WordPress后台" class="headerlink" title="登陆WordPress后台"></a><strong>登陆WordPress后台</strong></h2><p>在Applications标签，可以切换到应用列表，点击应用名称可以进入应用详情页面，在应用详情页面的Admin Panel中可以查看到网站后台的访问地址和用户名密码以及数据库账户密码信息。如果忘记WordPress后台的密码，可以从这里修改。</p><p><img src="https://img.inner.icu/file/8f612c8af5ce2ba9db721.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p><img src="https://img.inner.icu/file/19a3fab8e334cd24273d0.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"><br><img src="https://img.inner.icu/file/266574fee3a69b1ba8e83.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）">登录后进入WordPress后台，先设置语言。把后台设置成中文，前台根据目标客户所在国设置相应的语言，这里演示设置为英文操作如下。</p><p>后台语言设置：只需点击右上角的用户头像→ Edit Profile，将 Language 设置简体中文，下拉点击保存。</p><p><img src="https://img.inner.icu/file/cdc70f6ba352fcb02879e.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）">前台语言设置：点击设置—常规—站点语言，选择好语言后点击保存。</p><p><img src="https://img.inner.icu/file/ebbb52a4a2f81f8c1469c.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>进入后台除了设置语言外，还有一个重要的设置就是禁止搜索引擎收录网站。因为网站刚搭建好，很多设置以及页面都未完善，禁止搜索引擎收录，待网站建设完成后再开启，这样做有利于外贸网站的SEO优化。操作设置如下图所示，设置 —&gt; 阅读，在【对搜索引擎的可见性】这个地方打勾就是不收录。</p><p><img src="https://img.inner.icu/file/aa192d5c40b1442344c6c.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>另外对于刚接触WordPress新手而言，我强烈建议你看一看《**<a href="https://guomuyu.com/wordpress-dashboard-settings-you-need-to-know.html">WordPress后台设置必做事情</a><strong>》以及《</strong><a href="https://guomuyu.com/wordpress-tutorial-from-beginner-to-advanced.html">WordPress从入门到进阶教程</a>**》这两篇文章再进入下一步，这样才能更快地熟悉学会使用它建外贸独立站。</p><h2 id="安装WordPress主题模板"><a href="#安装WordPress主题模板" class="headerlink" title="安装WordPress主题模板"></a><strong>安装WordPress主题模板</strong></h2><p>WordPress属于开源程序，本身是免费的，安装好后，可以搭配下载第三方平台如<a href="https://guomuyu.com/go/?url=aHR0cDovLzEuZW52YXRvLm1hcmtldC9LalBOUjk=">Themeforest主题商城</a>模板，快速设计网站外观布局。如果你不知道用什么WordPress模板，这里推荐几款备受欢迎的外贸主题，如Avada、Astra、Hello等《<a href="https://guomuyu.com/best-wordpress-themes.html"><strong>最佳WordPress外贸主题</strong></a>》。然而，今天我要介绍的是<a href="https://guomuyu.com/go/?url=aHR0cHM6Ly93cGFzdHJhLmNvbS9wcmljaW5nLz9ic2Y9MTIxODI=">Astra外贸主题</a>。</p><p>在WordPress菜单栏中点击‘’外观‘’找到”主题”选项，点击”安装主题”。</p><p><img src="https://img.inner.icu/file/426e28d3d4f2abfe2ce7d.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>然后在搜索栏输入Astra，第一个就是，点击安装完成后并启用。</p><p><img src="https://img.inner.icu/file/2f12e993dc16b9e8e9b9f.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>Astra 主题启用后，在左侧会多一个Astra菜单栏，点击它然后点入门模板–安装并激活。</p><p><img src="https://img.inner.icu/file/bed9d51d94c2c8c2be8fd.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>然后自动跳转到如下界面，点击Bulid with Templates。对于页面编辑器，推荐使用Elementor。<img src="https://img.inner.icu/file/f1a6e785f4c68ea9097c4.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>然后来到Astra 主题的模板模板列表，里面有各种类型模板可挑选，筛选出免费的模板（没标记premium的就是免费模板），这里我用“Sierra Industry”这个免费模版来做演示，这是一个B2B的网站模板。</p><p><img src="https://img.inner.icu/file/6a983bc02bb5fb6beac71.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>点击Sierra Industry这个模板后会看到如下界面，先不做调整后面在改，点击Continue继续。<img src="https://img.inner.icu/file/91e82f09945d0ac09987b.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>下面这些功能可无需安装，点击“Skip &amp; this step”跳过。</p><p><img src="https://img.inner.icu/file/e69d3534516a8ca705861.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>点“Submit&amp;Build My Website”，等一两分钟左右模板导入安装完成。</p><p><img src="https://img.inner.icu/file/d36cbbe5333581ff56627.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>模板导入安装完成后，点击View Your Website</p><p><img src="https://img.inner.icu/file/1f93e0c6e20b1e9012468.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><h2 id="网站装修设计"><a href="#网站装修设计" class="headerlink" title="网站装修设计"></a><strong>网站装修设计</strong></h2><p>经过上面操作Astra主题模板已经成功导入，一个功能强大的网站雏形已经出来了，接下来，我们需要在模板的基础上进行自定义修改，文字、图片、页面来进一步完善外贸建站。</p><h3 id="自定义-Header-和-Footer"><a href="#自定义-Header-和-Footer" class="headerlink" title="自定义 Header 和 Footer"></a><strong>自定义 Header 和 Footer</strong></h3><p><strong>1)、Header（页眉）</strong>即网站顶部区域，通常包含网站名称或Logo、导航菜单、搜索框、登录&#x2F;注册链接、购物车图标等元素。</p><p><img src="https://img.inner.icu/file/0658c3844297cc9361aca.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>接下来先设置网站名称（site title）、Logo、网站图标（icon）部分。点击顶部“Customize”进入主题编辑界面，找到网站标识。</p><p><img src="https://img.inner.icu/file/7563a23478c09a2e9f85d.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p><img src="https://img.inner.icu/file/00ac0413a27861b16a59e.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>1、Site Icon（站点图标）这个图标展示在浏览器的标签里头。系统建议的图片尺寸512 x 512 图标，其实可以用32px*32px即可。</p><p><img src="https://img.inner.icu/file/8edfbf02220975a21af30.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>2、设置网站LOGO、Site Title（站点标题）、Tagline（网站的简短描述）</p><p><img src="https://img.inner.icu/file/31ebf05f34b18bad05adf.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>网站标题和Logo修改完成后，然后修改导航菜单如下图所示，依次点击主菜单&gt;从这里配置菜单&gt;编辑菜单。</p><p><img src="https://img.inner.icu/file/8458d0f410cd11cebd144.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"><img src="https://img.inner.icu/file/db6b0f2a4c2af689117fc.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>接着对主菜单进行排序、删除和添加操作。如果您还没有确定主菜单的内容，可以在制作完网站的各个页面后再进行设置。</p><p><img src="https://img.inner.icu/file/992f986b7352da1a7d829.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>菜单修改完成后，接下来添加一个指向联系页面的询盘按钮，完成后点击”发布”。</p><p><img src="https://img.inner.icu/file/5fc995abe4acc29b26894.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p><strong>2)、页脚（Footer</strong>）即网站最底部区域，通常包含版权信息、联系方法、隐私政策、服务条款、关于我们、常见问题解答、网站地图等信息。还是在主题编辑里找到页脚生成器</p><p><img src="https://img.inner.icu/file/af1515a512432414b4375.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>接下来，将页脚版权信息替换为自己的信息，正确的格式和写法如下：Copyright ©[时间][公司名称] All rights Reserved.</p><p><img src="https://img.inner.icu/file/8b23435135931a9c2cfc0.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>然后修改页脚其他部分，分别点击下面的四个Widge，可删除或替换其中的内容。</p><p><img src="https://img.inner.icu/file/c4aa256500c4303b97189.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><h3 id="修改Home（主页）"><a href="#修改Home（主页）" class="headerlink" title="修改Home（主页）"></a><strong>修改Home（主页）</strong></h3><p>网站页眉页脚都修改好后，接下来设置Home页面为网站首页，并对其页面内容修改成自己的信息操作如下设置&gt;阅读&gt;在主页下拉框选择Home页面，然后点击保存更改。</p><p><img src="https://img.inner.icu/file/8a01c2c986e40ae8444d3.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>然后转到&gt;页面，点击使用Elementor编辑来修改Home首页内容。</p><p><img src="https://img.inner.icu/file/6260a0018dad2a93d6d21.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>首选修改背景图片操作如下图所示，选中容器&gt;&gt;点击样式&gt;&gt;选择图像。</p><p><img src="https://img.inner.icu/file/6a5b1f3a1119204f23939.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>接下来依次修改页面中的内容，点击文字或按钮等其他元素，在界面左侧进行修改替换成自己的。</p><p><img src="https://img.inner.icu/file/12774c01ab44cc5094306.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>也可在原有的模板基础上进行添加文字、图片、视频等元素。</p><p><img src="https://img.inner.icu/file/ca6345506819a2cc6750b.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）">如果你觉得页面编辑设计起来很费时，其实有一个快速的方法可以使用 Astra 的模板来进行拼接。页面拉到最下方，使用 Astra 的【快速导入模板】功能。</p><p><img src="https://img.inner.icu/file/962f070692a80e6a20482.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>在此界面选中页面或模块可快速导入到网站，进行拼接修改。把不需要的模块删除，然后点击发布。</p><p><img src="https://img.inner.icu/file/c83f180734b6141936f0f.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p><img src="https://img.inner.icu/file/8f3d891d419f5ce399c66.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>最后，将新模板中的文字和图片替换为你自己的内容，主页就修改完成了。</p><h3 id="修改About-和-Contact-页面"><a href="#修改About-和-Contact-页面" class="headerlink" title="修改About 和 Contact 页面"></a><strong>修改About 和 Contact 页面</strong></h3><p>完成网站首页的编辑后，接着继续编辑修改其他页面（如About 和Contact页面）操作方法同上，把模版里的文字、图片等信息改成自己的。</p><p>唯一需要注意的是，在Contact页面（联系我们）会使用到询盘表单WPForms插件，这里演示下如何设置。首先点击WPForms菜单栏，选择一个表单点编辑<img src="https://img.inner.icu/file/5e2ea2cf91d7de579715c.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>进入表单设置界面点击设置&gt;&gt;通知，将【发送到电子邮件地址】修改为你自己的邮箱，然后保存即可。</p><p><img src="https://img.inner.icu/file/3ee20f33a282676951d98.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>然后回到WPForms界面，把表单的短代码复制下来。</p><p><img src="https://img.inner.icu/file/86ca8e26e7fbbcaf4f346.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>接着点击使用Elementor编辑来修改Contact页面</p><p><img src="https://img.inner.icu/file/a6b37d21cdd677895b740.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>在Contact编辑页面，往下滚动可看到如下图所示，点击编辑简码，把前面复制的表单短代码[wpforms id&#x3D;”1131”]粘贴到右侧，然后点击发布。</p><p><img src="https://img.inner.icu/file/fb03bbdf5cf5380e5a8f9.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"><img src="https://img.inner.icu/file/cf4e36e2dd6ea8dc31f76.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><h3 id="自定义-Blog-文章页面"><a href="#自定义-Blog-文章页面" class="headerlink" title="自定义 Blog 文章页面"></a><strong>自定义 Blog 文章页面</strong></h3><p>博客页面可以用于发布产品相关的知识文章、公司动态等，如果不想写博客，emm，那网站收获询盘的可能性就低了许多，你看我们平常买一些大件，也会多方看评测、知识型文章，而这些文章就在潜移默化中决定着我们的购买意愿。</p><p>接下来添加博客页面，在页面&gt;&gt;新页面&gt;&gt;页面标题填Blog&gt;&gt;发布</p><p><img src="https://img.inner.icu/file/91c69fb48bb7797064f83.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"><img src="https://img.inner.icu/file/6c274435e41d5cf545c28.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>然后，返回 WordPress 菜单中的”设置” - “阅读”，选择文章页为Blog（刚新建的博客页），保存修改。</p><p><img src="https://img.inner.icu/file/9ac408ba8e40009fddda4.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>接下来，开始撰写文章，并发布新的文章，以吸引更多的流量和进行谷歌SEO优化，提升排名。</p><p><img src="https://img.inner.icu/file/f6ffe4a30ff8ea7fda16a.png" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><h2 id="创建隐私政策、退货条款"><a href="#创建隐私政策、退货条款" class="headerlink" title="创建隐私政策、退货条款"></a><strong>创建隐私政策、退货条款</strong></h2><p>在WordPress后台，点击页面(‘’Pages‘’)创建网站相关政策条款Privacy Policy页面。用这个免费的<a href="https://guomuyu.com/go/?url=aHR0cHM6Ly9wb2xpY3ltYWtlci5pby9wcml2YWN5LXBvbGljeS8=">在线隐私政策生成器</a>可以帮我们迅速搞定生成相关信息： 按照步骤提交相关信息即可。<img src="https://img.inner.icu/file/a2082d3410e7d8b048438.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"><img src="https://img.inner.icu/file/fe2bcfa81a4fc753215de.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><h2 id="上传产品"><a href="#上传产品" class="headerlink" title="上传产品"></a><strong>上传产品</strong></h2><p>先删除已有的产品，点击产品“Products”→移动至回收站“Move to trash”→应用“Apply”，然后点击上方新增“Add new”添加新品，数量多的话可以使用导入“Import”功能通过表格导入。<img src="https://img.inner.icu/file/af7eb2007394e87792a94.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><h2 id="WooCommerce设置"><a href="#WooCommerce设置" class="headerlink" title="WooCommerce设置"></a><strong>WooCommerce设置</strong></h2><p>WooCommerce是全球最受欢迎的开源电子商务插件之一。它基于WordPress建站，只需一键安装即可使用。该插件提供了丰富的功能，包括产品发布、库存管理、支付网关和运输发货等，可以帮助搭建各种类型的电子商务网站。《<a href="https://guomuyu.com/woocommerce-tutorial.html">如何搭建B2C外贸独立站-WooCommerce教程指南</a>》</p><h2 id="绑定PayPal收款"><a href="#绑定PayPal收款" class="headerlink" title="绑定PayPal收款"></a><strong>绑定PayPal收款</strong></h2><p>作为最受欢迎的WordPress电子商务插件之一，WooCommerce提供了一个强大的解决方案。它支持接受来自多个第三方支付系统的付款，包括Stripe、WooPayments、和PayPal等。但目前除PayPal外前面两种都不支持中国大陆的商家。前期PayPal完全能满足需求了，等做大了再考虑注册香港或美国公司去申请。《<a href="https://guomuyu.com/how-to-add-paypal-payment-in-woocommerce.html">如何在WooCommerce商店中设置PayPal标准支付？</a>》</p><h2 id="设置WPForms表单"><a href="#设置WPForms表单" class="headerlink" title="设置WPForms表单"></a><strong>设置WPForms表单</strong></h2><p>许多企业网站，尤其是B2B外贸网站，在网站上添加联系表单，主要用于接收外贸客户的询盘，这几乎是必不可少的功能。《<a href="https://guomuyu.com/wpforms-form-plugin-usage.html">WPForms表单插件使用指南</a>》</p><h2 id="安装WordPress插件"><a href="#安装WordPress插件" class="headerlink" title="安装WordPress插件"></a><strong>安装WordPress插件</strong></h2><p>WordPress之所以成为全球最受欢迎的建站程序之一，是因为它具有无限的扩展性，这些扩展可以通过WordPress插件来实现网站各种功能，请看《<a href="https://guomuyu.com/recommended-wordpress-plugin.html">2024最新WordPress外贸网站插件推荐</a>》。</p><p><img src="https://img.inner.icu/file/9d4c13a499c79a868bbcd.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）"></p><p>Yoast SEO：排名第一的SEO插件，提高网站在搜索引擎中的排名<br>All In One WP Security：功能强大的安全插件，保护您的网站免受攻击<br>Ryviu：轻松导入亚马逊、速卖通等平台的产品评论<br>WPML：将您的网站翻译成多种语言<br>Tidio：即时聊天，快速解决客服问题，提高转化率</p><h2 id="添加网站数据监控"><a href="#添加网站数据监控" class="headerlink" title="添加网站数据监控"></a><strong>添加网站数据监控</strong></h2><p>在使用WordPress搭建外贸网站后，很多都想知道自己的网站流量怎么样，每天有多少人访问我们的网站，他们访问了哪些页面，通过哪些渠道来的流量，停留时间有多长，以及跳出率如何。其实很简单我们只要给网站添加一个统计代码即可，如果是外贸独立站，那么首先推荐的是Google Analytics。《<a href="https://guomuyu.com/wordpress-google-analytics.html">WordPress外贸独立站如何添加Google Analytics？</a>》</p><h2 id="外贸网站上线推广"><a href="#外贸网站上线推广" class="headerlink" title="外贸网站上线推广"></a><strong>外贸网站上线推广</strong></h2><p>以上所有工作都完成设置优化好了，那么接下来可以发布网站上线了，只需进入网站后台，点击”设置”然后选择”阅读”。在”搜索引擎可见性”一栏中取消勾选选项，建议让搜索引擎索引你的网站，最后保存修改即可。并且添加网站到搜索引擎，让搜索引擎来抓取我们的网站，然后每天持续更新网站内容。<br><img src="https://img.inner.icu/file/d408ff08b9bf85966de6c.jpg" alt="外贸建站：WordPress搭建外贸独立站零基础自建站完整教程（2024）">后面我们还需要通过<strong>网站数据监控</strong>来查看网站的流量数据反馈。来了解网站访问来源、用户浏览习惯和转化率等关键指标。通过数据分析，来优化网站内容营销策略、改进用户体验，并采取措施来提高网站在搜索引擎结果页面的排名，以吸引更多流量和潜在客户。</p><h1 id="用Payoneer收款结汇"><a href="#用Payoneer收款结汇" class="headerlink" title="用Payoneer收款结汇"></a><strong>用Payoneer收款结汇</strong></h1><p>当我们PayPal收到的美金结汇兑换成人民币，我们要注册Payoneer（派安盈）来收款，再提现到国内银行卡，做跨境的都知道派安盈了。《<a href="https://guomuyu.com/payoneer-tutorial.html">Payoneer派安盈注册教程及账户使用（2024）</a>》</p><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a><strong>补充</strong></h1><h2 id="网站迁移到Cloudways托管"><a href="#网站迁移到Cloudways托管" class="headerlink" title="网站迁移到Cloudways托管"></a><strong>网站迁移到Cloudways托管</strong></h2><p>Cloudways提供了两种迁移方式，1.是使用他们提供的搬家插件 Cloudways WordPress Migrator 自动完成网站搬家操作，这种方式只适用于使用 WordPress 搭建的网站。2.让 Cloudways 的客服人工帮你完成网站搬家，每个新用户享有一次免费人工网站搬家的服务，之后再使用人工网站搬家服务就要付费。具体操作流程请看《<a href="https://guomuyu.com/cloudways-wordpress-migrator.html">Cloudways迁移教程:如何迁移您的网站到Cloudways托管</a>》。</p><h2 id="如何屏蔽部分国家IP"><a href="#如何屏蔽部分国家IP" class="headerlink" title="如何屏蔽部分国家IP"></a><strong>如何屏蔽部分国家IP</strong></h2><p>外贸行业中，有很多从事同行业的人都有一个共同的硬性需求，即屏蔽国内IP的访问。尽管具体原因各不相同，但归根结底的目的是不希望同行和竞争对手能够访问自己的网站，以防止他们查看和复制自己的新产品。这是为了保护商业机密和维护竞争优势而采取的一种措施。《<a href="https://guomuyu.com/how-to-block-china-ip.html">外贸建站:WordPress如何屏蔽国内ip访问网站？</a>》</p><h2 id="做外贸独立站能在Fiverr找到哪些外包服务"><a href="#做外贸独立站能在Fiverr找到哪些外包服务" class="headerlink" title="做外贸独立站能在Fiverr找到哪些外包服务"></a><strong>做外贸独立站能在Fiverr找到哪些外包服务</strong></h2><p>想做独立站的朋友，尤其是一个人单干没有团队的时候，有一些工作不一定亲力亲为都自己来做，比如要自己搭建网站，<strong>设计图片，页面，做视频，写文案，做seo优化，运营推广</strong>等等，说实在一两个人完成都很累的何况一个人完成所有事情，其实上列举的你只需要雇人花钱，就可以把一些你不愿意做的脏活累活或不擅长的工作外包出去，最大程度地节省时间和精力，从而专注自己的核心业务。《<a href="https://guomuyu.com/what-is-fiverr.html">Fiverr是什么？做外贸独立站能在Fiverr找到哪些外包服务？</a>》</p><h1 id="外贸建站常见问题解答"><a href="#外贸建站常见问题解答" class="headerlink" title="外贸建站常见问题解答"></a><strong>外贸建站常见问题解答</strong></h1><p>很多企业虽然认识到外贸建站 的必要性，并把外贸网站搭建作为海外推广战略中重要的一环，但在真正网站建设过程中经常会遇到一些问题而陷入迷茫，以下是针对WordPress外贸建站的常见问题和详细解答，希望这些内容能为你提供帮助和指导。</p><h3 id="自己建外贸独立站需要花多少钱？"><a href="#自己建外贸独立站需要花多少钱？" class="headerlink" title="自己建外贸独立站需要花多少钱？"></a><strong>自己建外贸独立站需要花多少钱？</strong></h3><p>建立一个网站的成本取决于多个因素，包括域名、服务器、主题、插件等费用。一般来说，域名的费用在几十元不等，而服务器的费用取决于你选择的服务提供商和服务级别，通常普通用户一年的费用可能在几百元左右。</p><p>因此，自己搭建一个网站的硬件成本主要是域名和服务器。一年的总成本可能在千元以内。然而，如果你购买付费主题、插件，或者需要付费找人单独开发功能，那么成本就会增加。建站成本的确取决于你的需求和预算，可以根据具体情况来决定是否需要额外的投入。</p><h3 id="为什么要建设外贸独立站？"><a href="#为什么要建设外贸独立站？" class="headerlink" title="为什么要建设外贸独立站？"></a><strong>为什么要建设外贸独立站？</strong></h3><p><strong>自主控制权</strong>：自己搭建外贸独立站售卖商品可以不受B2B&#x2F;B2C电商平台规则的制约，拥有更高的自主权和灵活性。可以自由制定运营策略，避免平台规则变动对业务造成影响，并通过产品和服务创新提高产品的溢价。</p><p><strong>品牌建设和塑造</strong>：通过独立站可以展示企业的产品、主要业务、客户群体等信息，帮助客户了解企业情况。通过独立站，可以建立企业品牌形象，提升消费者对产品的信赖度，为品牌赋能并增加企业专业度。</p><p><strong>积累客户数据和私域流量</strong>：通过独立站，可以积累属于自己的客户数据和私域流量，而不是依赖第三方平台。这些数据可以帮助我们进行客户跟踪、分析和营销转化，拥有更大的控制权和灵活性。</p><p><strong>降低成本</strong>：相比依赖第三方平台，自建外贸独立站可以降低经营成本，避免支付高额的抽佣和店铺租金。</p><h3 id="对新手而言，外贸建站需要注意什么？"><a href="#对新手而言，外贸建站需要注意什么？" class="headerlink" title="对新手而言，外贸建站需要注意什么？"></a><strong>对新手而言，外贸建站需要注意什么？</strong></h3><p>外贸建站涉及许多重要事项，其中最关键的是自己购买域名和主机。这样一来，你将拥有完全的控制权，不受任何限制。如果你计划将建站工作外包，务必记得自行购买主机和域名。事实上，只要你愿意花点时间跟着本教程步骤操作，即使是新手也可以自行搭建网站，无需一定要外包给他人。</p><p>此外，在建站之前尽可能多地研究你的市场和竞争对手的独立站。了解他们的设计、内容、功能和营销策略，借鉴他们的长处，并找到自己的差异化点。通过<a href="https://guomuyu.com/sites/3866.html">SimilarWeb</a>、<a href="https://guomuyu.com/sites/3863.html">Semrush</a>这两款竞调工具，我们可以了解竞争对手的网站流量情况以及竞争对手网站排名流量预估。</p><h3 id="自己搭建外贸独立站要不要备案？"><a href="#自己搭建外贸独立站要不要备案？" class="headerlink" title="自己搭建外贸独立站要不要备案？"></a><strong>自己搭建外贸独立站要不要备案？</strong></h3><p>对于搭建外贸独立站是否需要备案，主要取决于你选择的服务器所在地。如果你使用的是国内服务器，那么根据中国的相关规定，需要进行备案，以确保网站的合法性和规范性。但是如果你选择的是境外服务器，比如国外的服务器，通常不需要备案。因此在选择服务器和建立网站时，都会首选国外主机服务器来搭建外贸独立站。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h1><p>本文旨在为零基础的小白提供一个详细的WordPress外贸建站教程，帮助他们在建站过程中减少困惑，更轻松地搭建自己的外贸网站。最后，若你觉得一个人做这些太难了没那个时间精力，可以使用<a href="https://guomuyu.com/what-is-fiverr.html">Fiverr服务外包</a>给专业的数字营销人员。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 跨境电商 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web3-quilibrium节点部署</title>
      <link href="/2024/06/01/qui%E8%8A%82%E7%82%B9%E9%83%A8%E7%BD%B2/"/>
      <url>/2024/06/01/qui%E8%8A%82%E7%82%B9%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p>Qui项目官方链接：<a href="https://quilibrium.com/">https://quilibrium.com/</a></p><h1 id="windows安装wsl2"><a href="#windows安装wsl2" class="headerlink" title="windows安装wsl2"></a>windows安装wsl2</h1><p><strong>wsl –set-default-version 2</strong></p><p><strong>wsl –install -d Ubuntu-22.04</strong></p><p><strong>设置nds 4.2.2.2</strong></p><p><a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">win10内核安装包</a></p><p><strong>更改清华源</strong></p><p><strong>vi &#x2F;etc&#x2F;apt&#x2F;sources.list</strong></p><p>esc gg VG delete 粘贴</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/ubuntu/</span> noble main restricted universe multiverse deb-src https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/ubuntu/</span> noble main restricted universe multiverse deb https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/ubuntu/</span> noble-updates main restricted universe multiverse deb-src https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/ubuntu/</span> noble-updates main restricted universe multiverse deb https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/ubuntu/</span> noble-backports main restricted universe multiverse deb-src https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/ubuntu/</span> noble-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><h1 id="linux安装go"><a href="#linux安装go" class="headerlink" title="linux安装go"></a>linux安装go</h1><hr><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wget https://golang.google.<span class="keyword">cn</span>/<span class="keyword">dl</span>/go1.<span class="number">22.4</span>.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">wget https://<span class="keyword">dl</span>.google.<span class="keyword">com</span>/<span class="keyword">go</span>/go1.<span class="number">20.14</span>.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="keyword">vi</span> ~/.<span class="keyword">profile</span></span><br><span class="line"></span><br><span class="line">export PATH=$PATH:/app/<span class="keyword">go</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="keyword">source</span> ~/.<span class="keyword">profile</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> env -<span class="keyword">w</span> GOEXPERIMENT=arenas</span><br></pre></td></tr></table></figure><h4 id="国内源"><a href="#国内源" class="headerlink" title="国内源"></a>国内源</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go env -w <span class="attribute">GO111MODULE</span>=on</span><br><span class="line">go env -w <span class="attribute">GOPROXY</span>=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure><h1 id="拉取qui项目"><a href="#拉取qui项目" class="headerlink" title="拉取qui项目"></a>拉取qui项目</h1><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/quilibriumnetwork/ceremonyclient.git</span><br><span class="line"></span><br><span class="line">cd ceremonyclient/<span class="keyword">node</span></span><br><span class="line"></span><br><span class="line"><span class="title">go</span> run ./... --<span class="attr">signature-check=</span><span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="查看peer-id"><a href="#查看peer-id" class="headerlink" title="查看peer-id"></a><strong>查看peer-id</strong></h4><p>go run .&#x2F;… -peer-id</p><h4 id="查看余额"><a href="#查看余额" class="headerlink" title="查看余额"></a><strong>查看余额</strong></h4><p>go run .&#x2F;… -balance</p><h4 id="grpc端口配置"><a href="#grpc端口配置" class="headerlink" title="grpc端口配置"></a><strong>grpc端口配置</strong></h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">listenMultiaddr:</span> <span class="keyword">/ip4/</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="keyword">/tcp/</span><span class="number">8336</span> </span><br><span class="line"><span class="symbol">listenGrpcMultiaddr:</span> <span class="string">&quot;/ip4/127.0.0.1/tcp/8337&quot;</span> </span><br><span class="line"><span class="symbol">listenRESTMultiaddr:</span> <span class="string">&quot;/ip4/127.0.0.1/tcp/8338&quot;</span></span><br></pre></td></tr></table></figure><h4 id="内存限制"><a href="#内存限制" class="headerlink" title="内存限制"></a><strong>内存限制</strong></h4><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">engine:</span></span><br><span class="line"><span class="symbol">dataWorkerMemoryLimit:</span> <span class="number">1024000000</span></span><br></pre></td></tr></table></figure><p><strong>grpcurl查看peer-id</strong></p><p>grpcurl -plaintext localhost:8337 quilibrium.node.node.pb.NodeService.GetNodeInfo</p><p><strong>grpcurl查看token</strong></p><p>grpcurl -plaintext localhost:8337 quilibrium.node.node.pb.NodeService.GetTokenInfo</p><h4 id="临时梯子订阅链接："><a href="#临时梯子订阅链接：" class="headerlink" title="临时梯子订阅链接："></a>临时梯子订阅链接：</h4><p><a href="https://cherry.azureedge.net/sub?target=clash&filename=CherryLink&url=https://cherryvpn.net/link/O9eFRHq0HSaFYowW?sub=2">https://cherry.azureedge.net/sub?target=clash&amp;filename=CherryLink&amp;url=https://cherryvpn.net/link/O9eFRHq0HSaFYowW?sub=2</a></p><p><a href="https://415f2b8e-3e39-41a1-b404-7ee92f142ea7.shandiannginx.com/api/v1/client/subscribe?token=f15db4a1238231a3b8783bf8ec4ac473">https://415f2b8e-3e39-41a1-b404-7ee92f142ea7.shandiannginx.com/api/v1/client/subscribe?token=f15db4a1238231a3b8783bf8ec4ac473</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> web3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Safari中position对-webkit-font-smoothing的影响</title>
      <link href="/2024/05/15/Safari%E4%B8%ADposition%E5%AF%B9-webkit-font-smoothing%E7%9A%84%E5%BD%B1%E5%93%8D/"/>
      <url>/2024/05/15/Safari%E4%B8%ADposition%E5%AF%B9-webkit-font-smoothing%E7%9A%84%E5%BD%B1%E5%93%8D/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img.inner.icu/file/ccc8f5a71e3747b1bde61.png" alt="img"></p><p>建议先了解 -webkit-font-smoothing，戳这里查看。 最近在调整本blog的header样式的时候发现一个神奇的问题，当一个元素从 position:fixed; 变更为（header上有个按钮 点击可以另header不固化在顶部）position:relative; 的时候，Safari对该元素内字体的渲</p><p>取值 static</p><p>该关键字指定元素使用正常的布局行为，即元素在文档常规流中当前的布局位置。此时 top, right, bottom, left 和 z-index 属性无效。relative</p><p>该关键字下，元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置（因此会在此元素未添加定位时所在位置留下空白）。position:relative 对 table-*-group, table-row, table-column, table-cell, table-caption 元素无效。absolute</p><p>元素会被移出正常文档流，并不为元素预留空间，通过指定元素相对于最近的非 static 定位祖先元素的偏移，来确定元素位置。绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。fixed</p><p>元素会被移出正常文档流，并不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。打印时，元素会出现在的每页的固定位置。fixed 属性会创建新的层叠上下文。当元素祖先的 transform、perspective、filter 或 backdrop-filter 属性非 none 时，容器由视口改为该祖先。sticky</p><p>元素根据正常文档流进行定位，然后相对它的最近滚动祖先（nearest scrolling ancestor）和 containing block（最近块级祖先 nearest block-level ancestor），包括 table-related 元素，基于 top、right、bottom 和 left 的值进行偏移。偏移值不会影响任何其他元素的位置。 该值总是创建一个新的层叠上下文（stacking context）。注意，一个 sticky 元素会“固定”在离它最近的一个拥有“滚动机制”的祖先上（当该祖先的 overflow 是 hidden、scroll、auto 或 overlay 时），即便这个祖先不是最近的真实可滚动祖先。这有效地抑制了任何“sticky”行为（详情见 Github issue on W3C CSSWG）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache开启HTTP2.0/SPDY支持</title>
      <link href="/2023/08/02/Apache%E5%BC%80%E5%90%AFHTTP2-0-SPDY%E6%94%AF%E6%8C%81/"/>
      <url>/2023/08/02/Apache%E5%BC%80%E5%90%AFHTTP2-0-SPDY%E6%94%AF%E6%8C%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache开启HTTP2-0-SPDY支持"><a href="#Apache开启HTTP2-0-SPDY支持" class="headerlink" title="Apache开启HTTP2.0&#x2F;SPDY支持"></a>Apache开启HTTP2.0&#x2F;SPDY支持</h1><p><img src="https://img.inner.icu/file/5d5eb1e24c2949f7ec559.png" alt="img"></p><p>apache虽然市场份额渐渐被Nginx赶超，但其仍有Nginx取代不了的优点，特别是它的Rewrite和动态处理，是Nginx无法比拟的，很多人说Apache无法承载高并发，其实Apache在2.4的版本中，采用了Event MPM的工作模式，对于处理高并发有了很高的提升。但是，如果你是需要用到反向代理和很大的高并发项目；或者用低配置的特价虚拟主机，建议你还是选Nginx，毕竟还是轻量。</p><p>这不是今天的重点，今天主要想写下Apache如何开启HTTP&#x2F;2，因为我发现网上并没有相关文章，只有一篇还是机器翻译的官方文档。</p><p>关于HTTP&#x2F;2的优点和性能有兴趣的请看之前写的《如何优化你的HTTPS》</p><p>上面说到Apache的工作模式，这里顺便简单介绍下：</p><p>Apache的目前有三种稳定的MPM(Multi-Processing Module，多进程处理模块)模式，分别是prefork，worker，event，它们同时也代表着Apache的演变和发展</p><h3 id="Prefork-MPM"><a href="#Prefork-MPM" class="headerlink" title="Prefork MPM"></a>Prefork MPM</h3><p>Prefork MPM实现了一个非线程的、预派生的web服务器。它在Apache启动之初，就先预派生一些子进程，然后等待连接；可以减少频繁创建和销毁进程的开销，每个子进程只有一个线程，在一个时间点内，只能处理一个请求。这是一个成熟稳定，可以兼容新老模块，也不需要担心线程安全问题，但是一个进程相对占用资源，消耗大量内存，不擅长处理高并发的场景。<img src="https://img.inner.icu/file/72db0ca80940a6667bc59.png" alt="img"></p><p>在Apache的配置文件httpd.conf的配置方式：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;IfModule mpm_prefork_module&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">StartServers</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">MinSpareServers</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">MaxSpareServers</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">MaxRequestWorkers</span> <span class="number">250</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">MaxConnectionsPerChild</span> <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="section">&lt;/IfModule&gt;</span></span><br></pre></td></tr></table></figure><p>显示详细信息</p><p>StartServers 服务器启动时建立的子进程数量，prefork默认是5，</p><p>MinSpareServers 空闲子进程的最小数量，默认5；如果当前空闲子进程数少于MinSpareServers ，那么Apache将以最大每秒一个的速度产生新的子进程。此参数不要设的太大。StartServers 服务器启动时建立的子进程数量，prefork默认是5，</p><p>MaxSpareServers 空闲子进程的最大数量，默认10；如果当前有超过MaxSpareServers数量的空闲子进程，那么父进程会杀死多余的子进程。次参数也不需要设置太大，如果你将其设置比MinSpareServers 小，Apache会自动将其修改为MinSpareServers +1的数量。</p><p>MaxRequestWorkers 限定服务器同一时间内客户端最大接入的请求数量，默认是256；任何超过了MaxRequestWorkers限制的请求都要进入等待队列，一旦一个个连接被释放，队列中的请求才将得到服务，如果要增大这个数值，必须先增大ServerLimit。在Apache2.3.1版本之前这参数MaxRequestWorkers被称为MaxClients。</p><p>MaxConnectionsPerChild 每个子进程在其生命周期内允许最大的请求数量，如果请求总数已经达到这个数值，子进程将会结束，如果设置为0，子进程将永远不会结束。在Apache2.3.9之前称之为MaxRequestsPerChild。</p><p>这里建议设置为非零，注意原因：</p><p>1）能够防止(偶然的)内存泄漏无限进行，从而耗尽内存。</p><p>2）给进程一个有限寿命，从而有助于当服务器负载减轻的时候减少活动进程的数量(重生的机会)。</p><h3 id="Worker-MPM"><a href="#Worker-MPM" class="headerlink" title="Worker MPM"></a>Worker MPM</h3><p>和prefork模式相比，worker使用了多进程和多线程的混合模式，worker模式也同样会先预派生一些子进程，然后每个子进程创建一些线程，同时包括一个监听线程，每个请求过来会被分配到一个线程来服务。线程比起进程会更轻量，因为线程是通过共享父进程的内存空间，因此，内存的占用会减少一些，在高并发的场景下会比prefork有更多可用的线程，表现会更优秀一些；另外，如果一个线程出现了问题也会导致同一进程下的线程出现问题，如果是多个线程出现问题，也只是影响Apache的一部分，而不是全部。由于用到多进程多线程，需要考虑到线程的安全了，在使用keep-alive长连接的时候，某个线程会一直被占用，即使中间没有请求，需要等待到超时才会被释放（该问题在prefork模式下也存在）。<img src="https://img.inner.icu/file/795e5660a6546d452a2ba.png" alt="img"></p><p>如何配置在Apache的配置文件httpd.conf的配置方式：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;IfModule mpm_worker_module&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">StartServers</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">ServerLimit</span> <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">MinSpareThreads</span> <span class="number">75</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">MaxSpareThreads</span> <span class="number">250</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">ThreadsPerChild</span> <span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">MaxRequestWorkers</span> <span class="number">400</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">MaxConnectionsPerChild</span> <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="section">&lt;/IfModule&gt;</span></span><br></pre></td></tr></table></figure><p>显示详细信息</p><p>StartServers 服务器启动时建立的子进程数量,在workers模式下默认是3.配置参数解释：</p><p>ServerLimit 系统配置的最大进程数量，默认不显示，自己添加上</p><p>MinSpareThreads 空闲子进程的最小数量，默认75</p><p>MaxSpareThreads 空闲子进程的最大数量，默认250</p><p>ThreadsPerChild 每个子进程产生的线程数量，默认是64</p><p>MaxRequestWorkers &#x2F; MaxClients 限定服务器同一时间内客户端最大接入的请求数量.</p><p>MaxConnectionsPerChild 每个子进程在其生命周期内允许最大的请求数量，如果请求总数已经达到这个数值，子进程将会结束，如果设置为0，子进程将永远不会结束。</p><p>同样这里建议设置为非零。</p><p>Worker模式下所能同时处理的请求总数是由子进程总数乘以ThreadsPerChild值决定的，应该大于等于MaxRequestWorkers。</p><p>如果负载很大，现有的子进程数不能满足时，控制进程会派生新的子进程。默认ServerLimit 最大的子进程总数是16，加大时也需要显式声明ServerLimit（最大值是20000）。</p><p>需要注意的是，如果显式声明了ServerLimit，那么它乘以 MaxRequestWorkers必须是ThreadsPerChild的整数倍，否则 Apache将会自动调节到一个相应值。而在Apache2.4较新的小版本中会报错无法正常启动。</p><h3 id="Event-MPM"><a href="#Event-MPM" class="headerlink" title="Event MPM"></a>Event MPM</h3><p>这是Apache最新的工作模式，它和worker模式很像，不同的是在于它解决了keep-alive长连接的时候占用线程资源被浪费的问题，在event工作模式中，会有一些专门的线程用来管理这些keep-alive类型的线程，当有真实请求过来的时候，将请求传递给服务器的线程，执行完毕后，又允许它释放。这增强了在高并发场景下的请求处理。</p><p><img src="https://img.inner.icu/file/3d6ee3238bff1276e86d3.png" alt="img"></p><p>如何配置在Apache的配置文件httpd.conf的配置方式：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;IfModule mpm_event_module&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">StartServers</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">ServerLimit</span> <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">MinSpareThreads</span> <span class="number">75</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">MaxSpareThreads</span> <span class="number">250</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">ThreadsPerChild</span> <span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">MaxRequestWorkers</span> <span class="number">400</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">MaxConnectionsPerChild</span> <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="section">&lt;/IfModule&gt;</span></span><br></pre></td></tr></table></figure><p>显示详细信息</p><p>event 模式与 worker 模式完全一样，参考 worker 模式参数即可，这里不再重复。</p><p>讲Apache开启HTTP&#x2F;2，为什么扯半天工作模式呢，因为这里有重点，HTTP&#x2F;2开启，要在Event MPM模式下，其他模式下HTTP&#x2F;2不工作</p><p>了解了以上，开始说Apache开启HTTP&#x2F;2，Apache在2.4.17版本中新增了HTTP&#x2F;2的支持，而HTTP&#x2F;2需要openssl 1.0.2+的版本支持，如何查看你的Apache版本和工作模式？</p><p>Openssl版本：</p><p>对于包管理工具安装的Apache，三种都已经安装支持，对于编译安装Apache的，需要在编译的时候添加–with-mpm&#x3D;prefork|worker|event来指定为哪一种MPM，当然也可以编译为三种都支持，通过–enable-mpms-shared&#x3D;all，这样编译的时候，会在modules目录下自动编译出三个mpm的so文件，然后通过配置文件更改MPM</p><p>说到配置文件，Apache的2.2版本和2.4版本的配置文件有所不同，Apache2.2的时候，模块都是在主配置文件httpd.conf中开启或添加，而在Apache2.4中，模块都根据分类整理在conf.modules.d下的配置文件中</p><p>所以在Apache2.4的版本配置MPM，是在这里的00-mpm.conf中进行配置</p><p>说到版本，对于编译安装的用户来说，这里不用多说，下载最新的包安装即可，对于yum包管理工具安装的用户来说，我们通过yum info httpd查看一下</p><p>CentOS6的默认yum源里只有httpd 2.2.15.69的release</p><p>Centos7的默认yum源里只有httpd 2.4.6.88的release</p><p>所以即便用yum更新到最新，也无法开启HTTP&#x2F;2，这里需要借助第三方的库。</p><p>CodeIT提供了一个很好的自定义库，这个库提供了最新版本的服务器软件(Apache &amp; Nginx)，在安装CodeIT库之前，需要开启EPEL，EPEL提供了CodeIT的依赖</p><p>安装CodeIT库</p><p>cd &#x2F;etc&#x2F;yum.repos.d &amp;&amp; wget <a href="https://repo.codeit.guru/codeit.el%60rpm-q">https://repo.codeit.guru/codeit.el`rpm-q</a> –qf “%{VERSION}” $(rpm -q –whatprovides redhat-release)&#96;.repo</p><p>安装完之后，在通过yum info httpd查看</p><p>没有问题，最新版本的，支持HTTP&#x2F;2</p><p>因为用Apache处理PHP的蛮多的，所以这里再多说句题外话。PHP在之前老的版本中，可以从官网看到，下载的包是区分线程安全和非线程安全的，但现在php7的包已经不区分线程安全和非线程安全了，而Apache2.4的worker工作模式和Event工作模式，由于其是基于线程的，所以会要求php用线程安全的方式，所以在进行php7的编译的时候，需要添加–enable-maintainer-zts来开启线程安全，否则通过httpd -t进行配置检测的时候，会提示错误，无法通过。当然，用profork工作模式，不会有问题。</p><p>回到正题，其实Apache升级到大于2.4.17，openssl升级到1.0.2+，并且Apache用event mpm，对于Apache启动HTTP&#x2F;2已经基本完成了，剩下的就是很简单的添加两个配置的地方来完成HTTP&#x2F;2了</p><p>添加http2模块，编译安装Apache，需要–enable-http2，如果是yum包安装，则安装mod_http2；安装完成后，在配置文件中添加加载项</p><p>LoadModule http2_module modules&#x2F;mod_http2.so</p><p>然后在全局或Vhost中添加协议指定HTTP&#x2F;2</p><p>Protocols h2 http&#x2F;1.1</p><p>另外可以天机HTTP&#x2F;2的IfModule，添加设置HTTP&#x2F;2的日志</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;IfModule http2_module&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">LogLevel</span> http2:info</span><br><span class="line"></span><br><span class="line"><span class="section">&lt;/IfModule&gt;</span></span><br></pre></td></tr></table></figure><p>欧克，这个时候，你就可以保存配置用httpd -t测试配置，没有问题重新加载配置，就可以看到你的Apache已经启用h2了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring 远程调试</title>
      <link href="/2023/06/02/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"/>
      <url>/2023/06/02/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img.inner.icu/file/2f1a5d664bcbb3eb4efa9.png" alt="img"></p><p>配置 若想调试远端web容器内部的应用，需要接入web容器的jvm，以Tomcat为例，需修改web容器的配置 &#x2F;&#x2F; bin\startup.bat（.sh）文件，在里面添加 &#x2F;&#x2F; windows set CATALINA_OPTS&#x3D;”-agentlib:jdwp&#x3D;transport&#x3D;dt_socket,address&#x3D;8888（自定义调试端口）,server…</p><p>首先，打开Edit configurations，点击 + 号，创建一个Remote应用。</p><p>step1 填写name，配置Host地址（远程服务器地址）和端口（选一个未被占用的端口，然后复制Command line arguments for remote JVM 下面的参数,示例配置的端口为5005:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005</span><br></pre></td></tr></table></figure><p>step2 这里是可选的，选择对应的jdk即可。</p><p>step2 经过以上步骤，已经获得了启动远程服务器的参数。在启动springboot时默认使用java命令来启动。</p><p>比如，示例项目启动命令为：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nohup</span> java -server -Xms492M -Xmx492M -jar wool-<span class="number">1</span>.<span class="number">0</span>.<span class="number">0</span>.jar &amp;</span><br></pre></td></tr></table></figure><p>那么此时在启动命令上添加上面获得的参数：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nohup</span> java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=<span class="number">5005</span> -server -Xms492M -Xmx492M -jar wool-<span class="number">1</span>.<span class="number">0</span>.<span class="number">0</span>.jar &amp;</span><br></pre></td></tr></table></figure><p>这样服务端就监听在5005端口了。可以通过以下命令来检查是否监听成功：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@izbp1c4fgtbk4x56zra24jz springboot]# netstat -anp | grep <span class="number">5005</span></span><br><span class="line">tcp        <span class="number">0</span>    <span class="number">750 10.1</span>.<span class="number">0.83:5005</span>          <span class="number">11.167.22.247</span>:<span class="number">56153</span>   ESTABLISHED <span class="number">32474</span>/java</span><br></pre></td></tr></table></figure><p>出现上述打印，说明监听成功。</p><p>但如果是部署在云服务器上，记得检查一下是否配置了相应的安全组，不然还是连接不到这个端口的。</p><p>通过以上步骤已经完成了服务器端参数的添加。下面启动刚才配置的Remote服务，即wool,在启动时候我们会发现此项启动程序只有debug启动模式。</p><p>启动完成，对需要debug的代码打上断点，剩下的操作步骤就是访问远程服务器对应的业务请求，本地就会同步debug。其余的操作与本地debug相同，此处就不再赘述了。</p><!-- <div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","loop":true,"video":{"url":"https://alist.inner.icu/d/115/%E7%94%B5%E5%BD%B1/%E8%9C%A1%E7%AC%94%E5%B0%8F%E6%96%B0%201-9%E5%AD%A3/S04/%E7%AC%AC%E5%9B%9B%E5%AD%A3%20%E5%8F%B0%E9%85%8D%20017%20%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%9C%8B%E7%89%99%E5%8C%BB%E5%93%A6.mp4?sign=T8yGBcerpUBCamQwOHrnQ--fXs3VjN-_gjLCbAYVjZc=:0","pic":"https://home.ustc.edu.cn/~xxxxx/GEM.jpg"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> -->]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
